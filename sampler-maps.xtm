;; GM drum scheme vars (e.g. *gm-kick*) are also defined in
;; libs/external/instruments.xtm

(define *gm-kick* 35)
(define *gm-kick-2* 36)
(define *gm-side-stick* 37)
(define *gm-snare* 38)
(define *gm-hand-clap* 39)
(define *gm-snare-2* 40)
(define *gm-low-floor-tom* 41)
(define *gm-closed-hi-hat* 42)
(define *gm-hi-floor-tom* 43)
(define *gm-pedal-hi-hat* 44)
(define *gm-low-tom* 45)
(define *gm-open-hi-hat* 46)
(define *gm-low-mid-tom* 47)
(define *gm-hi-mid-tom* 48)
(define *gm-crash* 49)
(define *gm-hi-tom* 50)
(define *gm-ride* 51)
(define *gm-chinese* 52)
(define *gm-ride-bell* 53)
(define *gm-tambourine* 54)
(define *gm-splash* 55)
(define *gm-cowbell* 56)
(define *gm-crash-2* 57)
(define *gm-vibraslap* 58)
(define *gm-ride-2* 59)
(define *gm-hi-bongo* 60)
(define *gm-low-bongo* 61)
(define *gm-mute-hi-conga* 62)
(define *gm-hi-conga* 63)
(define *gm-low-conga* 64)
(define *gm-hi-timbale* 65)
(define *gm-low-timbale* 66)
(define *gm-hi-agogo* 67)
(define *gm-low-agogo* 68)
(define *gm-cabasa* 69)
(define *gm-maracas* 70)
(define *gm-short-whistle* 71)
(define *gm-long-whistle* 72)
(define *gm-short-guiro* 73)
(define *gm-long-guiro* 74)
(define *gm-claves* 75)
(define *gm-hi-wood-block* 76)
(define *gm-low-wood-block* 77)
(define *gm-mute-cuica* 78)
(define *gm-open-cuica* 79)
(define *gm-mute-triangle* 80)
(define *gm-open-triangle* 81)
(define *gm-mute-surdo* 86)
(define *gm-open-surdo* 87)

(if (not (defined? '*user-sample-dir*))
    (eval '(define *user-sample-dir* "/Users/ben/Music/sample-libs")
	  (interaction-environment)))

;; Kit maps (using NI Battery 3 samples)

(define *NI-synthetic-kit-sample-map*
  (list (string-append *user-sample-dir*
                       "/drums/NI/synthetic/Mega Synthetic Kit/Mega Synthetic Kit Samples")
        (list "ader.wav")
        (list "air sot.wav")
        (list "alien at.wav")
        (list "band cymbal.wav")
        (list "bots.wav")
        (list "bowls rctt.wav")
        (list "buzz module.wav")
        (list "Clab.wav")
        (list "claves delay.wav")
        (list "cral.wav")
        (list "dark moler kick.wav")
        (list "Deep Gong 2.wav")
        (list "Deep Gong.wav")
        ;; (list "Dop 1.wav")
        ;; (list "dop 10.wav")
        ;; (list "Dop 11.wav")
        ;; (list "Dop 12.wav")
        ;; (list "dop 13.wav")
        ;; (list "Dop 14.wav")
        ;; (list "Dop 15.wav")
        ;; (list "Dop 16.wav")
        ;; (list "Dop 17.wav")
        ;; (list "Dop 18.wav")
        ;; (list "Dop 19.wav")
        ;; (list "Dop 2.wav")
        ;; (list "Dop 20.wav")
        ;; (list "Dop 21.wav")
        ;; (list "Dop 22.wav")
        ;; (list "Dop 23.wav")
        ;; (list "dop 24.wav")
        ;; (list "Dop 25.wav")
        ;; (list "Dop 26.wav")
        ;; (list "Dop 27.wav")
        ;; (list "dop 28.wav")
        ;; (list "Dop 29.wav")
        ;; (list "Dop 3.wav")
        ;; (list "Dop 30.wav")
        ;; (list "Dop 31.wav")
        ;; (list "Dop 32.wav")
        ;; (list "Dop 33.wav")
        ;; (list "Dop 34.wav")
        ;; (list "Dop 35.wav")
        ;; (list "Dop 36.wav")
        ;; (list "Dop 4.wav")
        ;; (list "Dop 5.wav")
        ;; (list "Dop 6.wav")
        ;; (list "Dop 7.wav")
        ;; (list "Dop 8.wav")
        ;; (list "Dop 9.wav")
        (list "fet.wav" *gm-snare*)
        (list "file snare.wav")
        (list "flush hit.wav")
        (list "fonv.wav")
        (list "futter.wav")
        (list "Hard kick 1.wav" *gm-kick-2*)
        (list "Hard Kick 2.wav" *gm-kick*)
        (list "Hard kick 3.wav")
        (list "Hard kick 4.wav")
        (list "Hard kick 5.wav")
        (list "Hard kick 6.wav")
        (list "Hard kick 7.wav")
        (list "Hard kick 8.wav")
        (list "Hard kick 9.wav")
        (list "hat en.wav")
        (list "hat her.wav" *gm-closed-hi-hat*)
        (list "hat sle.wav" *gm-open-hi-hat*)
        (list "hat stretch 2.wav")
        (list "hat stretch.wav")
        (list "heavy low kick 1.wav")
        (list "highj.wav")
        (list "hit ns 2.wav")
        (list "hit ns.wav")
        (list "juei.wav")
        (list "kick copler.wav")
        (list "little snare.wav")
        (list "Low Bass 2.wav")
        (list "low tub.wav")
        (list "merd.wav")
        (list "metal hit 2.wav")
        (list "metal hit.wav")
        (list "micor.wav")
        (list "morpher kick.wav")
        (list "murky.wav")
        (list "niker.wav")
        (list "norh.wav")
        (list "nsie.wav")
        (list "org.wav")
        (list "rapture.wav")
        (list "rattle cane.wav")
        (list "rubble.wav")
        (list "rumble kick.wav")
        (list "silc.wav")
        (list "sizzle.wav")
        (list "skk.wav")
        (list "slah.wav")
        (list "slank.wav")
        (list "smaks hat.wav")
        (list "smirl.wav")
        (list "smoris.wav")
        (list "snap snare.wav" *gm-snare-2*)
        (list "snar j.wav")
        (list "snare cl.wav")
        (list "sniiter.wav")
        (list "snitp.wav")
        (list "sol f.wav")
        (list "spide4r.wav")
        (list "spot delay.wav")
        (list "staff metal.wav")
        (list "statter.wav")
        (list "steamer.wav")
        (list "stff.wav")
        (list "stitch 2.wav")
        (list "stitch.wav")
        (list "stol.wav")
        (list "storm clap.wav" *gm-side-stick*)
        (list "strip h.wav")
        (list "sttor hat.wav")
        (list "Tile burg.wav")
        (list "timer Snap.wav")
        (list "v stat 2.wav")
        (list "v stat 3.wav")
        (list "v stat 4.wav")
        (list "v stat 5.wav")
        (list "V stat.wav")
        (list "vere.wav")
        (list "verl.wav")
        (list "vr2.wav")
        (list "vrte.wav")))



(define *NI-NuPop-kit-sample-map*
  (list (string-append *user-sample-dir*
                       "/drums/NI/production/NuPop Kit/NuPop Kit Samples")
        (list "BassDrum2_05.wav" *gm-kick-2*)
        (list "BassDrum_05.wav" *gm-kick*)
        (list "Clap.wav" *gm-hand-clap*)
        (list "CrashSyn3.wav" *gm-crash*)
        (list "FX1_05.wav")
        (list "HH-Closed_05.wav" *gm-closed-hi-hat*)
        (list "HH-Open_04.wav" *gm-open-hi-hat*)
        (list "Moog_04.wav")
        (list "Perc1_04.wav")
        (list "Perc2_03.wav")
        (list "Perc3_03.wav")
        (list "Ride1.wav" *gm-ride*)
        (list "Scratch2.wav")
        (list "Shaker1.wav" *gm-maracas*)
        (list "SnareDrum2_04.wav" *gm-snare-2*)
        (list "SnareDrum_09.wav" *gm-snare*)
        (list "Stick.wav" *gm-side-stick*)
        (list "TomHiR_03.wav" *gm-hi-floor-tom*)
        (list "TomHi_03.wav" *gm-hi-mid-tom*)
        (list "TomLowR_03.wav" *gm-low-floor-tom*)
        (list "TomLow_03.wav" *gm-low-tom*)
        (list "TomMidR_03.wav" *gm-snare*)
        (list "Tweaked2_01.wav")))


(define *NI-Nein-Oh-Nein-kit-sample-map*
  (list (string-append *user-sample-dir*
                       "/drums/NI/electronic/Nein Oh Nein Kit/Nein Oh Nein Kit Samples")
        (list "NON BD 1_A1.wav" *gm-kick*)
        (list "NON BD 2_A1.wav" *gm-kick-2*)
        (list "NON CH 3.wav" *gm-closed-hi-hat*)
        (list "NON CP.wav" *gm-hand-clap*)
        (list "NON CR 1_E4.wav" *gm-crash*)
        (list "NON HT 1_E2.wav" *gm-hi-tom*)
        (list "NON HT 2_FIS2.wav" *gm-hi-floor-tom*)
        (list "NON LT 1_AS1.wav" *gm-low-tom*)
        (list "NON LT 2_AS1.wav" *gm-low-floor-tom*)
        (list "NON MT 1_CIS2.wav")
        (list "NON MT 2_CIS2.wav")
        (list "NON OH 3.wav" *gm-open-hi-hat*)
        (list "NON RD 1_DIS4.wav" *gm-ride*)
        (list "NON SD 1_D4.wav" *gm-snare*)
        (list "NON SD 8_A1.wav" *gm-snare-2*)))


(define *NI-Dakeat-kit-sample-map*
  (list (string-append *user-sample-dir*
                       "/drums/NI/electronic/Dakeat Kit/Dakeat Kit Samples")
        (list "DK_bd_01.wav")
        (list "DK_bibybit_01.wav")
        (list "DK_bitbybit_02.wav")
        (list "DK_bitbybit_03.wav")
        (list "DK_bitbybit_04.wav")
        (list "DK_bitbybit_05.wav")
        (list "DK_bitbybit_06.wav")
        (list "DK_bitbybit_07.wav")
        (list "DK_bzzbit_01.wav")
        (list "DK_bzzbit_02.wav")
        (list "DK_chrd_01.wav")
        (list "DK_chrd_01b.wav")
        (list "DK_chrd_02.wav")
        (list "DK_chrd_02b.wav")
        (list "DK_chrd_03.wav")
        (list "DK_chrd_04.wav")
        (list "DK_creak.wav")
        (list "DK_dist snare.wav" *gm-snare-2*)
        (list "DK_fatbd_01.wav")
        (list "DK_fatbd_02.wav")
        (list "DK_fatbd_03.wav")
        (list "DK_fatbd_04.wav")
        (list "DK_fatbd_05.wav" *gm-kick*)
        (list "DK_fatclap_01.wav")
        (list "DK_fatsn_01.wav" *gm-snare*)
        (list "DK_guitbd_01.wav")
        (list "DK_guitbd_02.wav")
        (list "DK_hardnok_01.wav")
        (list "DK_hardnok_02.wav")
        (list "DK_hatis.wav")
        (list "DK_resobd_01.wav")
        (list "DK_resobd_02.wav")
        (list "DK_resobd_03.wav")
        (list "DK_resobd_04.wav" *gm-kick-2*)
        (list "DK_rimz.wav" *gm-side-stick*)
        (list "DK_shkbd_01.wav")
        (list "DK_sn_01.wav")
        (list "DK_sn_02.wav")
        (list "DK_sn_03.wav")
        (list "DK_snaracc.wav")
        (list "DK_snare creak.wav")
        (list "DK_talk snare.wav")
        (list "DK_vocal stab 01.wav")
        (list "DK_vocal stab 02.wav")
        (list "DK_vocal stab 03.wav")
        (list "DK_vocal stab 04.wav")
        (list "DK_vocal stab 05.wav")
        (list "DK_vocal stab 06.wav")))


(define *NI-jazz-kit-sample-map*
  (list (string-append *user-sample-dir*
                       "/drums/NI/acoustic/Full Jazz Kit Samples")
        (list "Bass Drum 18_23.wav" *gm-kick*)
        (list "Crash 17 Bell Br_04.wav" *gm-crash-2*)
        (list "Crash 17 Br_15.wav" *gm-crash*)
        (list "Crash 17 Scrape Br_04.wav")
        (list "Crash 18 Br_11.wav")
        (list "Crash 18 Scrape Br_04.wav")
        (list "Crash17 Edge St_06.wav")
        (list "Crash17 Mid St_09.wav")
        (list "Crash17 Scrape St_04.wav")
        (list "Crash18 Edge St_05.wav")
        (list "Crash18 Mid St_09.wav")
        (list "Crash18 Scrape St_04.wav")
        (list "HiHat Bell St_05.wav")
        (list "HiHat Bell Tip Br_06.wav")
        (list "HiHat Close Br_09.wav" *gm-closed-hi-hat*)
        (list "HiHat Open Br_07.wav" *gm-open-hi-hat*)
        (list "Ride Bell Br_06.wav" *gm-ride-bell*)
        (list "Ride Br_15.wav" *gm-ride*)
        (list "Ride Mid St_10.wav" *gm-ride-2*)
        (list "SD Br_36.wav" *gm-snare*)
        (list "SD Double Br Hit_07.wav")
        (list "SD Double Br_26.wav")
        (list "SD Ghost Br_17.wav")
        (list "SD Rim Br_20.wav")
        (list "SD Rough Tight Br_08.wav" *gm-snare-2*)
        (list "SD Side St_10.wav")
        (list "SD Slide Fast Br_40.wav")
        (list "SD Slide Mid Br_30.wav")
        (list "SD Slide Slow Br_32.wav")
        (list "SD Snap Br_37.wav")
        (list "Sizzle Br_09.wav")
        (list "Sizzle Scrape Br_04.wav")
        (list "Tom10 Br_16.wav" *gm-low-floor-tom*)
        (list "Tom13 Br_13.wav" *gm-low-tom*)
        (list "Tom15 Br_15.wav" *gm-hi-tom*)
        (list "Tom15 Side_04.wav")
        (list "Tom15 St_15.wav")))


(define *NI-heavy-rock-kit-sample-map*
  (list (string-append *user-sample-dir*
                       "/drums/NI/acoustic/Heavy Rock Kit Samples")
        (list "HRK_Dir_BD1_15.WAV" *gm-kick*)
        (list "HRK_Dir_BD2_15.WAV" *gm-kick-2*)
        (list "HRK_Dir_HH_cls_10.WAV" *gm-closed-hi-hat*)
        (list "HRK_Dir_HH_opn_06.WAV" *gm-open-hi-hat*)
        (list "HRK_Dir_crsh1_05.WAV" *gm-crash*)
        (list "HRK_Dir_crsh2_05.WAV" *gm-crash-2*)
        (list "HRK_Dir_rdeBel_05.WAV" *gm-ride-bell*)
        (list "HRK_Dir_rde_06.WAV" *gm-ride*)
        (list "HRK_Dir_snr_opnL_16.WAV" *gm-snare*)
        (list "HRK_Dir_snr_rimR_11.WAV" *gm-snare-2*)
        (list "HRK_Dir_snr_sdStk_07.WAV" *gm-side-stick*)
        (list "HRK_Dir_tom2_13.WAV" *gm-low-tom*)
        (list "HRK_Dir_tom3_13.WAV" *gm-low-mid-tom*)
        (list "HRK_Dir_tom4_13.WAV" *gm-hi-tom*)))

;; (define *salamander-kit-dir* "/drums/salamander/OH")
;; (define *salamander-kit-sample-map*
;;   (list
;;    (list "bellchime_F_2.wav")
;;    (list "china1Choke_OH_F_1.wav")
;;    (list "china1_OH_FF_1.wav")
;;    (list "china1_OH_FF_2.wav")
;;    (list "china1_OH_FF_3.wav")
;;    (list "china1_OH_FF_4.wav")
;;    (list "china1_OH_FF_5.wav")
;;    (list "china1_OH_FF_6.wav")
;;    (list "china1_OH_FF_7.wav")
;;    (list "china1_OH_FF_8.wav")
;;    (list "china2Choke_OH_F_1.wav")
;;    (list "china2_OH_FF_1.wav")
;;    (list "china2_OH_FF_2.wav")
;;    (list "china2_OH_FF_3.wav")
;;    (list "china2_OH_FF_4.wav")
;;    (list "china2_OH_FF_5.wav")
;;    (list "china2_OH_FF_6.wav")
;;    (list "cowbell_FF_1.wav")
;;    (list "cowbell_FF_2.wav")
;;    (list "cowbell_FF_3.wav")
;;    (list "cowbell_FF_4.wav")
;;    (list "cowbell_FF_5.wav")
;;    (list "cowbell_FF_6.wav")
;;    (list "cowbell_FF_7.wav")
;;    (list "cowbell_FF_8.wav")
;;    (list "cowbell_FF_9.wav")
;;    (list "cowbell_MP_1.wav")
;;    (list "cowbell_MP_2.wav")
;;    (list "cowbell_MP_3.wav")
;;    (list "cowbell_MP_4.wav")
;;    (list "cowbell_MP_5.wav")
;;    (list "cowbell_MP_6.wav")
;;    (list "cowbell_MP_7.wav")
;;    (list "cowbell_MP_8.wav")
;;    (list "cowbell_MP_9.wav")
;;    (list "cowbell_P_1.wav")
;;    (list "cowbell_P_10.wav")
;;    (list "cowbell_P_11.wav")
;;    (list "cowbell_P_2.wav")
;;    (list "cowbell_P_3.wav")
;;    (list "cowbell_P_4.wav")
;;    (list "cowbell_P_5.wav")
;;    (list "cowbell_P_6.wav")
;;    (list "cowbell_P_7.wav")
;;    (list "cowbell_P_8.wav")
;;    (list "cowbell_P_9.wav")
;;    (list "crash1Choke_OH_F_1.wav")
;;    (list "crash1_OH_FF_1.wav")
;;    (list "crash1_OH_FF_2.wav")
;;    (list "crash1_OH_FF_3.wav")
;;    (list "crash1_OH_FF_4.wav")
;;    (list "crash1_OH_FF_5.wav")
;;    (list "crash1_OH_FF_6.wav")
;;    (list "crash1_OH_P_1.wav")
;;    (list "crash1_OH_P_2.wav")
;;    (list "crash1_OH_P_3.wav")
;;    (list "crash1_OH_P_4.wav")
;;    (list "crash1_OH_P_5.wav")
;;    (list "crash2Choke_OH_F_1.wav")
;;    (list "crash2_OH_FF_1.wav")
;;    (list "crash2_OH_FF_2.wav")
;;    (list "crash2_OH_FF_3.wav")
;;    (list "crash2_OH_FF_4.wav")
;;    (list "crash2_OH_FF_5.wav")
;;    (list "crash2_OH_FF_6.wav")
;;    (list "crash2_OH_FF_7.wav")
;;    (list "crash2_OH_FF_8.wav")
;;    (list "crash2_OH_P_1.wav")
;;    (list "crash2_OH_P_2.wav")
;;    (list "crash2_OH_P_3.wav")
;;    (list "crash2_OH_P_4.wav")
;;    (list "crash3_OH_FF_1.wav")
;;    (list "crash3_OH_FF_2.wav")
;;    (list "crash3_OH_FF_3.wav")
;;    (list "crash3_OH_FF_4.wav")
;;    (list "crash3_OH_FF_5.wav")
;;    (list "crash3_OH_FF_6.wav")
;;    (list "crash3_OH_FF_7.wav")
;;    (list "crash3_OH_FF_8.wav")
;;    (list "hiTom_OH_FF_1.wav")
;;    (list "hiTom_OH_FF_10.wav")
;;    (list "hiTom_OH_FF_11.wav")
;;    (list "hiTom_OH_FF_12.wav")
;;    (list "hiTom_OH_FF_2.wav")
;;    (list "hiTom_OH_FF_3.wav")
;;    (list "hiTom_OH_FF_4.wav")
;;    (list "hiTom_OH_FF_5.wav")
;;    (list "hiTom_OH_FF_6.wav")
;;    (list "hiTom_OH_FF_7.wav")
;;    (list "hiTom_OH_FF_8.wav")
;;    (list "hiTom_OH_FF_9.wav")
;;    (list "hiTom_OH_F_1.wav")
;;    (list "hiTom_OH_F_10.wav")
;;    (list "hiTom_OH_F_2.wav")
;;    (list "hiTom_OH_F_3.wav")
;;    (list "hiTom_OH_F_4.wav")
;;    (list "hiTom_OH_F_5.wav")
;;    (list "hiTom_OH_F_6.wav")
;;    (list "hiTom_OH_F_7.wav")
;;    (list "hiTom_OH_F_8.wav")
;;    (list "hiTom_OH_F_9.wav")
;;    (list "hiTom_OH_P_1.wav")
;;    (list "hiTom_OH_P_2.wav")
;;    (list "hiTom_OH_P_3.wav")
;;    (list "hiTom_OH_P_4.wav")
;;    (list "hiTom_OH_P_5.wav")
;;    (list "hiTom_OH_P_6.wav")
;;    (list "hiTom_OH_P_7.wav")
;;    (list "hiTom_OH_P_8.wav")
;;    (list "hiTom_OH_P_9.wav")
;;    (list "hihatClosed_OH_F_1.wav")
;;    (list "hihatClosed_OH_F_10.wav")
;;    (list "hihatClosed_OH_F_11.wav")
;;    (list "hihatClosed_OH_F_12.wav")
;;    (list "hihatClosed_OH_F_13.wav")
;;    (list "hihatClosed_OH_F_14.wav")
;;    (list "hihatClosed_OH_F_15.wav")
;;    (list "hihatClosed_OH_F_16.wav")
;;    (list "hihatClosed_OH_F_17.wav")
;;    (list "hihatClosed_OH_F_18.wav")
;;    (list "hihatClosed_OH_F_19.wav")
;;    (list "hihatClosed_OH_F_2.wav")
;;    (list "hihatClosed_OH_F_20.wav")
;;    (list "hihatClosed_OH_F_3.wav")
;;    (list "hihatClosed_OH_F_4.wav")
;;    (list "hihatClosed_OH_F_5.wav")
;;    (list "hihatClosed_OH_F_6.wav")
;;    (list "hihatClosed_OH_F_7.wav")
;;    (list "hihatClosed_OH_F_8.wav")
;;    (list "hihatClosed_OH_F_9.wav")
;;    (list "hihatClosed_OH_P_1.wav")
;;    (list "hihatClosed_OH_P_10.wav")
;;    (list "hihatClosed_OH_P_11.wav")
;;    (list "hihatClosed_OH_P_12.wav")
;;    (list "hihatClosed_OH_P_13.wav")
;;    (list "hihatClosed_OH_P_14.wav")
;;    (list "hihatClosed_OH_P_15.wav")
;;    (list "hihatClosed_OH_P_16.wav")
;;    (list "hihatClosed_OH_P_17.wav")
;;    (list "hihatClosed_OH_P_18.wav")
;;    (list "hihatClosed_OH_P_19.wav")
;;    (list "hihatClosed_OH_P_2.wav")
;;    (list "hihatClosed_OH_P_20.wav")
;;    (list "hihatClosed_OH_P_3.wav")
;;    (list "hihatClosed_OH_P_4.wav")
;;    (list "hihatClosed_OH_P_5.wav")
;;    (list "hihatClosed_OH_P_6.wav")
;;    (list "hihatClosed_OH_P_7.wav")
;;    (list "hihatClosed_OH_P_8.wav")
;;    (list "hihatClosed_OH_P_9.wav")
;;    (list "hihatFootStomp_OH_MP_1.wav")
;;    (list "hihatFootStomp_OH_MP_2.wav")
;;    (list "hihatFootStomp_OH_MP_3.wav")
;;    (list "hihatFootStomp_OH_MP_4.wav")
;;    (list "hihatFoot_OH_MP_1.wav")
;;    (list "hihatFoot_OH_MP_10.wav")
;;    (list "hihatFoot_OH_MP_11.wav")
;;    (list "hihatFoot_OH_MP_12.wav")
;;    (list "hihatFoot_OH_MP_2.wav")
;;    (list "hihatFoot_OH_MP_3.wav")
;;    (list "hihatFoot_OH_MP_4.wav")
;;    (list "hihatFoot_OH_MP_5.wav")
;;    (list "hihatFoot_OH_MP_6.wav")
;;    (list "hihatFoot_OH_MP_7.wav")
;;    (list "hihatFoot_OH_MP_8.wav")
;;    (list "hihatFoot_OH_MP_9.wav")
;;    (list "hihatOpen_OH_FF_1.wav")
;;    (list "hihatOpen_OH_FF_2.wav")
;;    (list "hihatOpen_OH_FF_3.wav")
;;    (list "hihatOpen_OH_FF_4.wav")
;;    (list "hihatOpen_OH_FF_5.wav")
;;    (list "hihatOpen_OH_FF_6.wav")
;;    (list "hihatOpen_OH_F_1.wav")
;;    (list "hihatOpen_OH_F_2.wav")
;;    (list "hihatOpen_OH_F_3.wav")
;;    (list "hihatOpen_OH_F_4.wav")
;;    (list "hihatOpen_OH_F_5.wav")
;;    (list "hihatOpen_OH_P_1.wav")
;;    (list "hihatOpen_OH_P_2.wav")
;;    (list "hihatOpen_OH_P_3.wav")
;;    (list "hihatOpen_OH_P_4.wav")
;;    (list "hihatOpen_OH_P_5.wav")
;;    (list "hihatOpen_OH_P_6.wav")
;;    (list "hihatOpen_OH_P_7.wav")
;;    (list "hihatSemiOpen1_OH_F_1.wav")
;;    (list "hihatSemiOpen1_OH_F_2.wav")
;;    (list "hihatSemiOpen1_OH_F_3.wav")
;;    (list "hihatSemiOpen1_OH_F_4.wav")
;;    (list "hihatSemiOpen1_OH_F_5.wav")
;;    (list "hihatSemiOpen1_OH_P_.wav")
;;    (list "hihatSemiOpen1_OH_P_1.wav")
;;    (list "hihatSemiOpen1_OH_P_2.wav")
;;    (list "hihatSemiOpen1_OH_P_3.wav")
;;    (list "hihatSemiOpen1_OH_P_4.wav")
;;    (list "hihatSemiOpen1_OH_P_5.wav")
;;    (list "hihatSemiOpen2_OH_F_1.wav")
;;    (list "hihatSemiOpen2_OH_F_2.wav")
;;    (list "hihatSemiOpen2_OH_F_3.wav")
;;    (list "hihatSemiOpen2_OH_F_4.wav")
;;    (list "hihatSemiOpen2_OH_F_5.wav")
;;    (list "hihatSemiOpen2_OH_P_1.wav")
;;    (list "hihatSemiOpen2_OH_P_2.wav")
;;    (list "hihatSemiOpen2_OH_P_3.wav")
;;    (list "hihatSemiOpen2_OH_P_4.wav")
;;    (list "hihatSemiOpen2_OH_P_5.wav")
;;    (list "hihatSemiOpen3_OH_F_1.wav")
;;    (list "hihatSemiOpen3_OH_F_2.wav")
;;    (list "hihatSemiOpen3_OH_F_3.wav")
;;    (list "hihatSemiOpen3_OH_F_4.wav")
;;    (list "hihatSemiOpen3_OH_F_5.wav")
;;    (list "hihatSemiOpen3_OH_P_1.wav")
;;    (list "hihatSemiOpen3_OH_P_2.wav")
;;    (list "hihatSemiOpen3_OH_P_3.wav")
;;    (list "hihatSemiOpen3_OH_P_4.wav")
;;    (list "hihatSemiOpen3_OH_P_5.wav")
;;    (list "hihatSemiOpen4_OH_F_1.wav")
;;    (list "hihatSemiOpen4_OH_F_2.wav")
;;    (list "hihatSemiOpen4_OH_F_3.wav")
;;    (list "hihatSemiOpen4_OH_F_4.wav")
;;    (list "hihatSemiOpen4_OH_F_5.wav")
;;    (list "hihatSemiOpen4_OH_P_1.wav")
;;    (list "hihatSemiOpen4_OH_P_2.wav")
;;    (list "hihatSemiOpen4_OH_P_3.wav")
;;    (list "hihatSemiOpen4_OH_P_4.wav")
;;    (list "hihatSemiOpen4_OH_P_5.wav")
;;    (list "hihatSemiOpen5_OH_F_1.wav")
;;    (list "hihatSemiOpen5_OH_F_2.wav")
;;    (list "hihatSemiOpen5_OH_F_3.wav")
;;    (list "hihatSemiOpen5_OH_F_4.wav")
;;    (list "hihatSemiOpen5_OH_F_5.wav")
;;    (list "hihatSemiOpen5_OH_P_1.wav")
;;    (list "hihatSemiOpen5_OH_P_2.wav")
;;    (list "hihatSemiOpen5_OH_P_3.wav")
;;    (list "hihatSemiOpen5_OH_P_4.wav")
;;    (list "hihatSemiOpen5_OH_P_5.wav")
;;    (list "hihatSemiOpen6_OH_F_1.wav")
;;    (list "hihatSemiOpen6_OH_F_2.wav")
;;    (list "hihatSemiOpen6_OH_F_3.wav")
;;    (list "hihatSemiOpen6_OH_F_4.wav")
;;    (list "hihatSemiOpen6_OH_F_5.wav")
;;    (list "hihatSemiOpen6_OH_P_1.wav")
;;    (list "hihatSemiOpen6_OH_P_2.wav")
;;    (list "hihatSemiOpen6_OH_P_3.wav")
;;    (list "hihatSemiOpen6_OH_P_4.wav")
;;    (list "hihatSemiOpen6_OH_P_5.wav")
;;    (list "hihatSemiOpen7_OH_F_1.wav")
;;    (list "hihatSemiOpen7_OH_F_2.wav")
;;    (list "hihatSemiOpen7_OH_F_3.wav")
;;    (list "hihatSemiOpen7_OH_F_4.wav")
;;    (list "hihatSemiOpen7_OH_F_5.wav")
;;    (list "hihatSemiOpen7_OH_P_1.wav")
;;    (list "hihatSemiOpen7_OH_P_2.wav")
;;    (list "hihatSemiOpen7_OH_P_3.wav")
;;    (list "hihatSemiOpen7_OH_P_4.wav")
;;    (list "hihatSemiOpen7_OH_P_5.wav")
;;    (list "kick2_OH_FF_1.wav")
;;    (list "kick2_OH_FF_10.wav")
;;    (list "kick2_OH_FF_11.wav")
;;    (list "kick2_OH_FF_12.wav")
;;    (list "kick2_OH_FF_2.wav")
;;    (list "kick2_OH_FF_3.wav")
;;    (list "kick2_OH_FF_4.wav")
;;    (list "kick2_OH_FF_5.wav")
;;    (list "kick2_OH_FF_6.wav")
;;    (list "kick2_OH_FF_7.wav")
;;    (list "kick2_OH_FF_8.wav")
;;    (list "kick2_OH_FF_9.wav")
;;    (list "kick2_OH_F_1.wav")
;;    (list "kick2_OH_F_10.wav")
;;    (list "kick2_OH_F_11.wav")
;;    (list "kick2_OH_F_2.wav")
;;    (list "kick2_OH_F_3.wav")
;;    (list "kick2_OH_F_4.wav")
;;    (list "kick2_OH_F_5.wav")
;;    (list "kick2_OH_F_6.wav")
;;    (list "kick2_OH_F_7.wav")
;;    (list "kick2_OH_F_8.wav")
;;    (list "kick2_OH_F_9.wav")
;;    (list "kick2_OH_P_1.wav")
;;    (list "kick2_OH_P_2.wav")
;;    (list "kick2_OH_P_3.wav")
;;    (list "kick2_OH_P_4.wav")
;;    (list "kick2_OH_P_5.wav")
;;    (list "kick2_OH_P_6.wav")
;;    (list "kick2_OH_P_7.wav")
;;    (list "kick2_OH_P_8.wav")
;;    (list "kick2_OH_P_9.wav")
;;    (list "kick_OH_FF_1.wav")
;;    (list "kick_OH_FF_10.wav")
;;    (list "kick_OH_FF_11.wav")
;;    (list "kick_OH_FF_12.wav")
;;    (list "kick_OH_FF_2.wav")
;;    (list "kick_OH_FF_3.wav")
;;    (list "kick_OH_FF_4.wav")
;;    (list "kick_OH_FF_5.wav")
;;    (list "kick_OH_FF_6.wav")
;;    (list "kick_OH_FF_7.wav")
;;    (list "kick_OH_FF_8.wav")
;;    (list "kick_OH_FF_9.wav")
;;    (list "kick_OH_F_1.wav")
;;    (list "kick_OH_F_10.wav")
;;    (list "kick_OH_F_11.wav")
;;    (list "kick_OH_F_2.wav")
;;    (list "kick_OH_F_3.wav")
;;    (list "kick_OH_F_4.wav")
;;    (list "kick_OH_F_5.wav")
;;    (list "kick_OH_F_6.wav")
;;    (list "kick_OH_F_7.wav")
;;    (list "kick_OH_F_8.wav")
;;    (list "kick_OH_F_9.wav")
;;    (list "kick_OH_P_1.wav")
;;    (list "kick_OH_P_2.wav")
;;    (list "kick_OH_P_3.wav")
;;    (list "kick_OH_P_4.wav")
;;    (list "kick_OH_P_5.wav")
;;    (list "kick_OH_P_6.wav")
;;    (list "kick_OH_P_7.wav")
;;    (list "kick_OH_P_8.wav")
;;    (list "kick_OH_P_9.wav")
;;    (list "loTom_OH_FF_1.wav")
;;    (list "loTom_OH_FF_2.wav")
;;    (list "loTom_OH_FF_3.wav")
;;    (list "loTom_OH_FF_4.wav")
;;    (list "loTom_OH_FF_5.wav")
;;    (list "loTom_OH_FF_6.wav")
;;    (list "loTom_OH_FF_7.wav")
;;    (list "loTom_OH_FF_8.wav")
;;    (list "loTom_OH_MP_1.wav")
;;    (list "loTom_OH_MP_10.wav")
;;    (list "loTom_OH_MP_2.wav")
;;    (list "loTom_OH_MP_3.wav")
;;    (list "loTom_OH_MP_4.wav")
;;    (list "loTom_OH_MP_5.wav")
;;    (list "loTom_OH_MP_6.wav")
;;    (list "loTom_OH_MP_7.wav")
;;    (list "loTom_OH_MP_8.wav")
;;    (list "loTom_OH_MP_9.wav")
;;    (list "loTom_OH_PP_1.wav")
;;    (list "loTom_OH_PP_2.wav")
;;    (list "loTom_OH_PP_3.wav")
;;    (list "loTom_OH_PP_4.wav")
;;    (list "loTom_OH_PP_5.wav")
;;    (list "loTom_OH_PP_6.wav")
;;    (list "ride1Bell_OH_F_1.wav")
;;    (list "ride1Bell_OH_F_2.wav")
;;    (list "ride1Bell_OH_F_3.wav")
;;    (list "ride1Bell_OH_F_4.wav")
;;    (list "ride1Bell_OH_F_5.wav")
;;    (list "ride1Bell_OH_F_6.wav")
;;    (list "ride1_OH_FF_1.wav")
;;    (list "ride1_OH_FF_2.wav")
;;    (list "ride1_OH_FF_3.wav")
;;    (list "ride1_OH_FF_4.wav")
;;    (list "ride1_OH_MP_1.wav")
;;    (list "ride1_OH_MP_2.wav")
;;    (list "ride1_OH_MP_3.wav")
;;    (list "ride1_OH_MP_4.wav")
;;    (list "ride1_OH_MP_5.wav")
;;    (list "ride1_OH_MP_6.wav")
;;    (list "ride1_OH_MP_7.wav")
;;    (list "ride1_OH_MP_8.wav")
;;    (list "ride2Bell_OH_F_1.wav")
;;    (list "ride2Bell_OH_F_2.wav")
;;    (list "ride2Bell_OH_F_3.wav")
;;    (list "ride2Bell_OH_F_4.wav")
;;    (list "ride2Bell_OH_F_5.wav")
;;    (list "ride2Bell_OH_F_6.wav")
;;    (list "ride2CrashChoke_OH_F_1.wav")
;;    (list "ride2Crash_OH_FF_1.wav")
;;    (list "ride2Crash_OH_FF_2.wav")
;;    (list "ride2Crash_OH_FF_3.wav")
;;    (list "ride2Crash_OH_FF_4.wav")
;;    (list "ride2Crash_OH_FF_5.wav")
;;    (list "ride2Crash_OH_FF_6.wav")
;;    (list "ride2Crash_OH_MP_1.wav")
;;    (list "ride2Crash_OH_MP_2.wav")
;;    (list "ride2Crash_OH_MP_3.wav")
;;    (list "ride2_OH_FF_1.wav")
;;    (list "ride2_OH_FF_2.wav")
;;    (list "ride2_OH_FF_3.wav")
;;    (list "ride2_OH_FF_4.wav")
;;    (list "ride2_OH_FF_5.wav")
;;    (list "ride2_OH_MP_1.wav")
;;    (list "ride2_OH_MP_2.wav")
;;    (list "ride2_OH_MP_3.wav")
;;    (list "ride2_OH_MP_4.wav")
;;    (list "ride2_OH_MP_5.wav")
;;    (list "ride2_OH_MP_6.wav")
;;    (list "ride2_OH_MP_7.wav")
;;    (list "ride2_OH_MP_8.wav")
;;    (list "ride2_OH_PP_1.wav")
;;    (list "ride2_OH_PP_2.wav")
;;    (list "ride2_OH_PP_3.wav")
;;    (list "ride2_OH_PP_4.wav")
;;    (list "snare2OFF_OH_F_1.wav")
;;    (list "snare2OFF_OH_F_10.wav")
;;    (list "snare2OFF_OH_F_2.wav")
;;    (list "snare2OFF_OH_F_3.wav")
;;    (list "snare2OFF_OH_F_4.wav")
;;    (list "snare2OFF_OH_F_5.wav")
;;    (list "snare2OFF_OH_F_6.wav")
;;    (list "snare2OFF_OH_F_7.wav")
;;    (list "snare2OFF_OH_F_8.wav")
;;    (list "snare2OFF_OH_F_9.wav")
;;    (list "snare2OFF_OH_P_1.wav")
;;    (list "snare2OFF_OH_P_2.wav")
;;    (list "snare2OFF_OH_P_3.wav")
;;    (list "snare2OFF_OH_P_4.wav")
;;    (list "snare2OFF_OH_P_5.wav")
;;    (list "snare2OFF_OH_P_6.wav")
;;    (list "snare2_OH_FF_1.wav")
;;    (list "snare2_OH_FF_2.wav")
;;    (list "snare2_OH_FF_3.wav")
;;    (list "snare2_OH_FF_4.wav")
;;    (list "snare2_OH_FF_5.wav")
;;    (list "snare2_OH_FF_6.wav")
;;    (list "snare2_OH_FF_7.wav")
;;    (list "snare2_OH_FF_8.wav")
;;    (list "snare2_OH_F_1.wav")
;;    (list "snare2_OH_F_10.wav")
;;    (list "snare2_OH_F_11.wav")
;;    (list "snare2_OH_F_12.wav")
;;    (list "snare2_OH_F_2.wav")
;;    (list "snare2_OH_F_3.wav")
;;    (list "snare2_OH_F_4.wav")
;;    (list "snare2_OH_F_5.wav")
;;    (list "snare2_OH_F_6.wav")
;;    (list "snare2_OH_F_7.wav")
;;    (list "snare2_OH_F_8.wav")
;;    (list "snare2_OH_F_9.wav")
;;    (list "snare2_OH_Ghost_1.wav")
;;    (list "snare2_OH_Ghost_10.wav")
;;    (list "snare2_OH_Ghost_2.wav")
;;    (list "snare2_OH_Ghost_3.wav")
;;    (list "snare2_OH_Ghost_4.wav")
;;    (list "snare2_OH_Ghost_5.wav")
;;    (list "snare2_OH_Ghost_6.wav")
;;    (list "snare2_OH_Ghost_7.wav")
;;    (list "snare2_OH_Ghost_8.wav")
;;    (list "snare2_OH_Ghost_9.wav")
;;    (list "snare2_OH_MP_1.wav")
;;    (list "snare2_OH_MP_10.wav")
;;    (list "snare2_OH_MP_11.wav")
;;    (list "snare2_OH_MP_12.wav")
;;    (list "snare2_OH_MP_13.wav")
;;    (list "snare2_OH_MP_14.wav")
;;    (list "snare2_OH_MP_2.wav")
;;    (list "snare2_OH_MP_3.wav")
;;    (list "snare2_OH_MP_4.wav")
;;    (list "snare2_OH_MP_5.wav")
;;    (list "snare2_OH_MP_6.wav")
;;    (list "snare2_OH_MP_7.wav")
;;    (list "snare2_OH_MP_8.wav")
;;    (list "snare2_OH_MP_9.wav")
;;    (list "snareOFF_OH_F_1.wav")
;;    (list "snareOFF_OH_F_10.wav")
;;    (list "snareOFF_OH_F_2.wav")
;;    (list "snareOFF_OH_F_3.wav")
;;    (list "snareOFF_OH_F_4.wav")
;;    (list "snareOFF_OH_F_5.wav")
;;    (list "snareOFF_OH_F_6.wav")
;;    (list "snareOFF_OH_F_7.wav")
;;    (list "snareOFF_OH_F_8.wav")
;;    (list "snareOFF_OH_F_9.wav")
;;    (list "snareOFF_OH_P_1.wav")
;;    (list "snareOFF_OH_P_2.wav")
;;    (list "snareOFF_OH_P_3.wav")
;;    (list "snareOFF_OH_P_4.wav")
;;    (list "snareOFF_OH_P_5.wav")
;;    (list "snareStick_OH_F_1.wav")
;;    (list "snareStick_OH_F_10.wav")
;;    (list "snareStick_OH_F_2.wav")
;;    (list "snareStick_OH_F_3.wav")
;;    (list "snareStick_OH_F_4.wav")
;;    (list "snareStick_OH_F_5.wav")
;;    (list "snareStick_OH_F_6.wav")
;;    (list "snareStick_OH_F_7.wav")
;;    (list "snareStick_OH_F_8.wav")
;;    (list "snareStick_OH_F_9.wav")
;;    (list "snare_OH_FF_1.wav")
;;    (list "snare_OH_FF_2.wav")
;;    (list "snare_OH_FF_3.wav")
;;    (list "snare_OH_FF_4.wav")
;;    (list "snare_OH_FF_5.wav")
;;    (list "snare_OH_FF_6.wav")
;;    (list "snare_OH_FF_7.wav")
;;    (list "snare_OH_FF_8.wav")
;;    (list "snare_OH_FF_9.wav")
;;    (list "snare_OH_F_1.wav")
;;    (list "snare_OH_F_10.wav")
;;    (list "snare_OH_F_11.wav")
;;    (list "snare_OH_F_12.wav")
;;    (list "snare_OH_F_2.wav")
;;    (list "snare_OH_F_3.wav")
;;    (list "snare_OH_F_4.wav")
;;    (list "snare_OH_F_5.wav")
;;    (list "snare_OH_F_6.wav")
;;    (list "snare_OH_F_7.wav")
;;    (list "snare_OH_F_8.wav")
;;    (list "snare_OH_F_9.wav")
;;    (list "snare_OH_Ghost_1.wav")
;;    (list "snare_OH_Ghost_10.wav")
;;    (list "snare_OH_Ghost_2.wav")
;;    (list "snare_OH_Ghost_3.wav")
;;    (list "snare_OH_Ghost_4.wav")
;;    (list "snare_OH_Ghost_5.wav")
;;    (list "snare_OH_Ghost_6.wav")
;;    (list "snare_OH_Ghost_7.wav")
;;    (list "snare_OH_Ghost_8.wav")
;;    (list "snare_OH_Ghost_9.wav")
;;    (list "snare_OH_MP_1.wav")
;;    (list "snare_OH_MP_10.wav")
;;    (list "snare_OH_MP_11.wav")
;;    (list "snare_OH_MP_12.wav")
;;    (list "snare_OH_MP_13.wav")
;;    (list "snare_OH_MP_14.wav")
;;    (list "snare_OH_MP_2.wav")
;;    (list "snare_OH_MP_3.wav")
;;    (list "snare_OH_MP_4.wav")
;;    (list "snare_OH_MP_5.wav")
;;    (list "snare_OH_MP_6.wav")
;;    (list "snare_OH_MP_7.wav")
;;    (list "snare_OH_MP_8.wav")
;;    (list "snare_OH_MP_9.wav")
;;    (list "splash1_OH_F_1.wav")
;;    (list "splash1_OH_F_2.wav")
;;    (list "splash1_OH_F_3.wav")
;;    (list "splash1_OH_F_4.wav")
;;    (list "splash1_OH_F_5.wav")
;;    (list "splash1_OH_P_1.wav")
;;    (list "splash1_OH_P_2.wav")
;;    (list "splash1_OH_P_3.wav")
;;    (list "splash1_OH_P_4.wav")
;;    (list "splash1_OH_P_5.wav")
;;    ))


(define *NI-steinway-sample-map*
  (list (string-append *user-sample-dir*
                       "/piano/steinway")
        (list "Stein-R(G6)-V(082)-dB(3971)-T(ML)-M(34)-P(719-02-03).WAV" 103)
        (list "Stein-R(G5)-V(090)-dB(3102)-T(ML)-M(37)-P(731-03-03).WAV" 91)
        (list "Stein-R(G4)-V(085)-dB(4467)-T(ML)-M(28)-P(793-01-03).WAV" 79)
        (list "Stein-R(G3)-V(085)-dB(2994)-T(ML)-M(29)-P(1074-02-04).WAV" 67)
        (list "Stein-R(G2)-V(085)-dB(3260)-T(ML)-M(30)-P(614-03-03).WAV" 55)
        (list "Stein-R(G1)-V(077)-dB(3181)-T(ML)-M(29)-P(482-02-04).WAV" 43)
        (list "Stein-R(G0)-V(080)-dB(2978)-T(ML)-M(25)-P(279-04-03).WAV" 31)
        (list "Stein-R(F6)-V(082)-dB(4064)-T(ML)-M(32)-P(533-04-02).WAV" 101)
        (list "Stein-R(F5)-V(085)-dB(3733)-T(ML)-M(36)-P(567-01-01).WAV" 89)
        (list "Stein-R(F4)-V(085)-dB(4679)-T(ML)-M(18)-P(567-02-03).WAV" 77)
        (list "Stein-R(F3)-V(080)-dB(3842)-T(ML)-M(31)-P(831-02-02).WAV" 65)
        (list "Stein-R(F2)-V(085)-dB(3521)-T(ML)-M(33)-P(918-02-01).WAV" 53)
        (list "Stein-R(F1)-V(080)-dB(3423)-T(ML)-M(32)-P(708-02-01).WAV" 41)
        (list "Stein-R(F0)-V(080)-dB(3075)-T(ML)-M(29)-P(563-03-03).WAV" 29)
        (list "Stein-R(E6)-V(082)-dB(3938)-T(ML)-M(40)-P(331-01-02).WAV" 100)
        (list "Stein-R(E5)-V(085)-dB(3614)-T(ML)-M(32)-P(357-01-02).WAV" 88)
        (list "Stein-R(E4)-V(085)-dB(4403)-T(ML)-M(26)-P(349-01-01).WAV" 76)
        (list "Stein-R(E3)-V(085)-dB(3884)-T(ML)-M(26)-P(629-03-03).WAV" 64)
        (list "Stein-R(E2)-V(085)-dB(3055)-T(ML)-M(43)-P(1168-04-03).WAV" 52)
        (list "Stein-R(E1)-V(080)-dB(3175)-T(ML)-M(31)-P(974-03-01).WAV" 40)
        (list "Stein-R(E0)-V(080)-dB(3366)-T(ML)-M(25)-P(840-01-01).WAV" 28)
        (list "Stein-R(D6)-V(082)-dB(3731)-T(ML)-M(32)-P(134-04-04).WAV" 98)
        (list "Stein-R(D5)-V(085)-dB(3518)-T(ML)-M(35)-P(142-03-02).WAV" 86)
        (list "Stein-R(D4)-V(085)-dB(4045)-T(ML)-M(27)-P(138-02-01).WAV" 74)
        (list "Stein-R(D3)-V(085)-dB(3554)-T(ML)-M(38)-P(349-01-04).WAV" 62)
        (list "Stein-R(D2)-V(085)-dB(2820)-T(ML)-M(33)-P(1467-04-04).WAV" 50)
        (list "Stein-R(D1)-V(085)-dB(2965)-T(ML)-M(39)-P(1272-04-01).WAV" 38)
        (list "Stein-R(D0)-V(080)-dB(2757)-T(ML)-M(32)-P(1122-04-04).WAV" 26)
        (list "Stein-R(C7)-V(082)-dB(4150)-T(ML)-M(33)-P(1316-02-04).WAV" 108)
        (list "Stein-R(C6)-V(082)-dB(3330)-T(ML)-M(33)-P(1368-04-01).WAV" 96)
        (list "Stein-R(C5)-V(085)-dB(4132)-T(ML)-M(31)-P(1374-02-01).WAV" 84)
        (list "Stein-R(C4)-V(085)-dB(3297)-T(ML)-M(31)-P(1758-01-01).WAV" 72)
        (list "Stein-R(C3)-V(085)-dB(3910)-T(ML)-M(24)-P(152-03-04).WAV" 60)
        (list "Stein-R(C2)-V(080)-dB(3459)-T(ML)-M(31)-P(1760-04-03).WAV" 48)
        (list "Stein-R(C1)-V(080)-dB(4132)-T(ML)-M(15)-P(1573-04-03).WAV" 36)
        (list "Stein-R(C0)-V(080)-dB(2888)-T(ML)-M(28)-P(1387-01-04).WAV" 24)
        (list "Stein-R(B6)-V(082)-dB(3969)-T(ML)-M(31)-P(1119-03-04).WAV" 107)
        (list "Stein-R(B5)-V(075)-dB(3267)-T(ML)-M(38)-P(1196-02-03).WAV" 95)
        (list "Stein-R(B4)-V(085)-dB(4112)-T(ML)-M(38)-P(1170-03-04).WAV" 83)
        (list "Stein-R(B3)-V(085)-dB(3024)-T(ML)-M(31)-P(1511-03-02).WAV" 71)
        (list "Stein-R(B2)-V(085)-dB(3272)-T(ML)-M(50)-P(154-04-01).WAV" 59)
        (list "Stein-R(B1)-V(080)-dB(3815)-T(ML)-M(31)-P(2049-03-04).WAV" 47)
        (list "Stein-R(B0)-V(085)-dB(3678)-T(ML)-M(29)-P(1843-01-01).WAV" 35)
        (list "Stein-R(B-1)-V(077)-dB(3286)-T(ML)-M(21)-P(1689-03-03).WAV" 23)
        (list "Stein-R(A6)-V(082)-dB(3658)-T(ML)-M(31)-P(919-02-03).WAV" 105)
        (list "Stein-R(A5)-V(082)-dB(3565)-T(ML)-M(35)-P(984-01-01).WAV" 93)
        (list "Stein-R(A4)-V(085)-dB(4430)-T(ML)-M(29)-P(984-04-04).WAV" 81)
        (list "Stein-R(A3)-V(085)-dB(3041)-T(ML)-M(33)-P(1280-03-01).WAV" 69)
        (list "Stein-R(A2)-V(085)-dB(2892)-T(ML)-M(30)-P(400-04-02).WAV" 57)
        (list "Stein-R(A1)-V(085)-dB(2927)-T(ML)-M(34)-P(176-03-04).WAV" 45)
        (list "Stein-R(A0)-V(085)-dB(3478)-T(ML)-M(28)-P(2126-03-01).WAV" 33)
        (list "Stein-R(A-1)-V(077)-dB(3129)-T(ML)-M(22)-P(1956-04-01).WAV" 21)))

;; SSO orchestral samples

(define *SSO-sample-path* (string-append *user-sample-dir*
                                         "/sso/Samples/"))

(define *SSO-solo-violin-sample-map*
  (list (string-append *SSO-sample-path* "Violin")
        (list "violin-a#3.wav" 58)
        (list "violin-a#4.wav" 70)
        (list "violin-a#5.wav" 82)
        (list "violin-a#6.wav" 94)
        (list "violin-c#4.wav" 61)
        (list "violin-c#5.wav" 73)
        (list "violin-c#6.wav" 85)
        (list "violin-c#7.wav" 97)
        (list "violin-e4.wav" 64)
        (list "violin-e5.wav" 76)
        (list "violin-e6.wav" 88)
        (list "violin-g3.wav" 55)
        (list "violin-g4.wav" 67)
        (list "violin-g5.wav" 79)
        (list "violin-g6.wav" 91)))

(define *SSO-violin-1-sample-map*
  (list (string-append *SSO-sample-path* "1st Violins")
        (list "1st-violins-piz-rr1-a#3.wav" 58 2)
        (list "1st-violins-piz-rr1-a#4.wav" 70 2)
        (list "1st-violins-piz-rr1-a#5.wav" 82 2)
        (list "1st-violins-piz-rr1-a#6.wav" 94 2)
        (list "1st-violins-piz-rr1-c#4.wav" 61 2)
        (list "1st-violins-piz-rr1-c#5.wav" 73 2)
        (list "1st-violins-piz-rr1-c#6.wav" 85 2)
        (list "1st-violins-piz-rr1-e4.wav" 64 2)
        (list "1st-violins-piz-rr1-e5.wav" 76 2)
        (list "1st-violins-piz-rr1-e6.wav" 88 2)
        (list "1st-violins-piz-rr1-g3.wav" 55 2)
        (list "1st-violins-piz-rr1-g4.wav" 67 2)
        (list "1st-violins-piz-rr1-g5.wav" 79 2)
        (list "1st-violins-piz-rr1-g6.wav" 91 2)
        ;; (list "1st-violins-piz-rr2-a#3.wav" 58)
        ;; (list "1st-violins-piz-rr2-a#4.wav" 70)
        ;; (list "1st-violins-piz-rr2-a#5.wav" 82)
        ;; (list "1st-violins-piz-rr2-a#6.wav" 94)
        ;; (list "1st-violins-piz-rr2-c#4.wav" 61)
        ;; (list "1st-violins-piz-rr2-c#5.wav" 73)
        ;; (list "1st-violins-piz-rr2-c#6.wav" 85)
        ;; (list "1st-violins-piz-rr2-e4.wav" 64)
        ;; (list "1st-violins-piz-rr2-e5.wav" 76)
        ;; (list "1st-violins-piz-rr2-e6.wav" 88)
        ;; (list "1st-violins-piz-rr2-g3.wav" 55)
        ;; (list "1st-violins-piz-rr2-g4.wav" 67)
        ;; (list "1st-violins-piz-rr2-g5.wav" 79)
        ;; (list "1st-violins-piz-rr2-g6.wav" 91)
        (list "1st-violins-stc-rr1-a#3.wav" 58 1)
        (list "1st-violins-stc-rr1-a#4.wav" 70 1)
        (list "1st-violins-stc-rr1-a#5.wav" 82 1)
        (list "1st-violins-stc-rr1-a#6.wav" 94 1)
        (list "1st-violins-stc-rr1-c#4.wav" 61 1)
        (list "1st-violins-stc-rr1-c#5.wav" 73 1)
        (list "1st-violins-stc-rr1-c#6.wav" 85 1)
        (list "1st-violins-stc-rr1-e4.wav" 64 1)
        (list "1st-violins-stc-rr1-e5.wav" 76 1)
        (list "1st-violins-stc-rr1-e6.wav" 88 1)
        (list "1st-violins-stc-rr1-g3.wav" 55 1)
        (list "1st-violins-stc-rr1-g4.wav" 67 1)
        (list "1st-violins-stc-rr1-g5.wav" 79 1)
        (list "1st-violins-stc-rr1-g6.wav" 91 1)
        ;; (list "1st-violins-stc-rr2-a#3.wav" 58)
        ;; (list "1st-violins-stc-rr2-a#4.wav" 70)
        ;; (list "1st-violins-stc-rr2-a#5.wav" 82)
        ;; (list "1st-violins-stc-rr2-a#6.wav" 94)
        ;; (list "1st-violins-stc-rr2-c#4.wav" 61)
        ;; (list "1st-violins-stc-rr2-c#5.wav" 73)
        ;; (list "1st-violins-stc-rr2-c#6.wav" 85)
        ;; (list "1st-violins-stc-rr2-e4.wav" 64)
        ;; (list "1st-violins-stc-rr2-e5.wav" 76)
        ;; (list "1st-violins-stc-rr2-e6.wav" 88)
        ;; (list "1st-violins-stc-rr2-g3.wav" 55)
        ;; (list "1st-violins-stc-rr2-g4.wav" 67)
        ;; (list "1st-violins-stc-rr2-g5.wav" 79)
        ;; (list "1st-violins-stc-rr2-g6.wav" 91)
        (list "1st-violins-sus-a#3.wav" 58 0)
        (list "1st-violins-sus-a#4.wav" 70 0)
        (list "1st-violins-sus-a#5.wav" 82 0)
        (list "1st-violins-sus-a#6.wav" 94 0)
        (list "1st-violins-sus-c#4.wav" 61 0)
        (list "1st-violins-sus-c#5.wav" 73 0)
        (list "1st-violins-sus-c#6.wav" 85 0)
        (list "1st-violins-sus-e4.wav" 64 0)
        (list "1st-violins-sus-e5.wav" 76 0)
        (list "1st-violins-sus-e6.wav" 88 0)
        (list "1st-violins-sus-g3.wav" 55 0)
        (list "1st-violins-sus-g4.wav" 67 0)
        (list "1st-violins-sus-g5.wav" 79 0)
        (list "1st-violins-sus-g6.wav" 91 0)))

(define *SSO-violin-2-sample-map*
  (list (string-append *SSO-sample-path* "2nd Violins")
        (list "2nd-violins-piz-rr1-a#3.wav" 58 2)
        (list "2nd-violins-piz-rr1-a#4.wav" 70 2)
        (list "2nd-violins-piz-rr1-a#5.wav" 82 2)
        (list "2nd-violins-piz-rr1-a#6.wav" 94 2)
        (list "2nd-violins-piz-rr1-c#4.wav" 61 2)
        (list "2nd-violins-piz-rr1-c#5.wav" 73 2)
        (list "2nd-violins-piz-rr1-c#6.wav" 85 2)
        (list "2nd-violins-piz-rr1-e4.wav" 64 2)
        (list "2nd-violins-piz-rr1-e5.wav" 76 2)
        (list "2nd-violins-piz-rr1-e6.wav" 88 2)
        (list "2nd-violins-piz-rr1-g3.wav" 55 2)
        (list "2nd-violins-piz-rr1-g4.wav" 67 2)
        (list "2nd-violins-piz-rr1-g5.wav" 79 2)
        (list "2nd-violins-piz-rr1-g6.wav" 91 2)
        ;; (list "2nd-violins-piz-rr2-a#3.wav" 58)
        ;; (list "2nd-violins-piz-rr2-a#4.wav" 70)
        ;; (list "2nd-violins-piz-rr2-a#5.wav" 82)
        ;; (list "2nd-violins-piz-rr2-a#6.wav" 94)
        ;; (list "2nd-violins-piz-rr2-c#4.wav" 61)
        ;; (list "2nd-violins-piz-rr2-c#5.wav" 73)
        ;; (list "2nd-violins-piz-rr2-c#6.wav" 85)
        ;; (list "2nd-violins-piz-rr2-e4.wav" 64)
        ;; (list "2nd-violins-piz-rr2-e5.wav" 76)
        ;; (list "2nd-violins-piz-rr2-e6.wav" 88)
        ;; (list "2nd-violins-piz-rr2-g3.wav" 55)
        ;; (list "2nd-violins-piz-rr2-g4.wav" 67)
        ;; (list "2nd-violins-piz-rr2-g5.wav" 79)
        ;; (list "2nd-violins-piz-rr2-g6.wav" 91)
        (list "2nd-violins-stc-rr1-a#3.wav" 58 1)
        (list "2nd-violins-stc-rr1-a#4.wav" 70 1)
        (list "2nd-violins-stc-rr1-a#5.wav" 82 1)
        (list "2nd-violins-stc-rr1-a#6.wav" 94 1)
        (list "2nd-violins-stc-rr1-c#4.wav" 61 1)
        (list "2nd-violins-stc-rr1-c#5.wav" 73 1)
        (list "2nd-violins-stc-rr1-c#6.wav" 85 1)
        (list "2nd-violins-stc-rr1-e4.wav" 64 1)
        (list "2nd-violins-stc-rr1-e5.wav" 76 1)
        (list "2nd-violins-stc-rr1-e6.wav" 88 1)
        (list "2nd-violins-stc-rr1-g3.wav" 55 1)
        (list "2nd-violins-stc-rr1-g4.wav" 67 1)
        (list "2nd-violins-stc-rr1-g5.wav" 79 1)
        (list "2nd-violins-stc-rr1-g6.wav" 91 1)
        ;; (list "2nd-violins-stc-rr2-a#3.wav" 58)
        ;; (list "2nd-violins-stc-rr2-a#4.wav" 70)
        ;; (list "2nd-violins-stc-rr2-a#5.wav" 82)
        ;; (list "2nd-violins-stc-rr2-a#6.wav" 94)
        ;; (list "2nd-violins-stc-rr2-c#4.wav" 61)
        ;; (list "2nd-violins-stc-rr2-c#5.wav" 73)
        ;; (list "2nd-violins-stc-rr2-c#6.wav" 85)
        ;; (list "2nd-violins-stc-rr2-e4.wav" 64)
        ;; (list "2nd-violins-stc-rr2-e5.wav" 76)
        ;; (list "2nd-violins-stc-rr2-e6.wav" 88)
        ;; (list "2nd-violins-stc-rr2-g3.wav" 55)
        ;; (list "2nd-violins-stc-rr2-g4.wav" 67)
        ;; (list "2nd-violins-stc-rr2-g5.wav" 79)
        ;; (list "2nd-violins-stc-rr2-g6.wav" 91)
        (list "2nd-violins-sus-a#3.wav" 58 0)
        (list "2nd-violins-sus-a#4.wav" 70 0)
        (list "2nd-violins-sus-a#5.wav" 82 0)
        (list "2nd-violins-sus-a#6.wav" 94 0)
        (list "2nd-violins-sus-c#4.wav" 61 0)
        (list "2nd-violins-sus-c#5.wav" 73 0)
        (list "2nd-violins-sus-c#6.wav" 85 0)
        (list "2nd-violins-sus-e4.wav" 64 0)
        (list "2nd-violins-sus-e5.wav" 76 0)
        (list "2nd-violins-sus-e6.wav" 88 0)
        (list "2nd-violins-sus-g3.wav" 55 0)
        (list "2nd-violins-sus-g4.wav" 67 0)
        (list "2nd-violins-sus-g5.wav" 79 0)
        (list "2nd-violins-sus-g6.wav" 91 0)))

(define *SSO-solo-cello-sample-map*
  (list (string-append *SSO-sample-path* "Cello")
        (list "cello-a2.wav" 45)
        (list "cello-a3.wav" 57)
        (list "cello-a4.wav" 69)
        (list "cello-a5.wav" 81)
        (list "cello-c2.wav" 36)
        (list "cello-c3.wav" 48)
        (list "cello-c4.wav" 60)
        (list "cello-c5.wav" 72)
        (list "cello-d#2.wav" 39)
        (list "cello-d#3.wav" 51)
        (list "cello-d#4.wav" 63)
        (list "cello-d#5.wav" 75)
        (list "cello-f#2.wav" 42)
        (list "cello-f#3.wav" 54)
        (list "cello-f#4.wav" 66)
        (list "cello-f#5.wav" 78)))

(define *SSO-celli-sample-map*
  (list (string-append *SSO-sample-path* "Celli")
        (list "celli-piz-rr1-a2.wav" 45 2)
        (list "celli-piz-rr1-a3.wav" 57 2)
        (list "celli-piz-rr1-a4.wav" 69 2)
        (list "celli-piz-rr1-c2.wav" 36 2)
        (list "celli-piz-rr1-c3.wav" 48 2)
        (list "celli-piz-rr1-c4.wav" 60 2)
        (list "celli-piz-rr1-c5.wav" 72 2)
        (list "celli-piz-rr1-d#2.wav" 39 2)
        (list "celli-piz-rr1-d#3.wav" 51 2)
        (list "celli-piz-rr1-d#4.wav" 63 2)
        (list "celli-piz-rr1-f#2.wav" 42 2)
        (list "celli-piz-rr1-f#3.wav" 54 2)
        (list "celli-piz-rr1-f#4.wav" 66 2)
        ;; (list "celli-piz-rr2-a2.wav")
        ;; (list "celli-piz-rr2-a3.wav")
        ;; (list "celli-piz-rr2-a4.wav")
        ;; (list "celli-piz-rr2-c2.wav")
        ;; (list "celli-piz-rr2-c3.wav")
        ;; (list "celli-piz-rr2-c4.wav")
        ;; (list "celli-piz-rr2-c5.wav")
        ;; (list "celli-piz-rr2-d#2.wav")
        ;; (list "celli-piz-rr2-d#3.wav")
        ;; (list "celli-piz-rr2-d#4.wav")
        ;; (list "celli-piz-rr2-f#2.wav")
        ;; (list "celli-piz-rr2-f#3.wav")
        ;; (list "celli-piz-rr2-f#4.wav")
        (list "celli-stc-rr1-a2.wav" 45 1)
        (list "celli-stc-rr1-a3.wav" 57 1)
        (list "celli-stc-rr1-a4.wav" 69 1)
        (list "celli-stc-rr1-c2.wav" 36 1)
        (list "celli-stc-rr1-c3.wav" 48 1)
        (list "celli-stc-rr1-c4.wav" 60 1)
        (list "celli-stc-rr1-c5.wav" 72 1)
        (list "celli-stc-rr1-d#2.wav" 39 1)
        (list "celli-stc-rr1-d#3.wav" 51 1)
        (list "celli-stc-rr1-d#4.wav" 63 1)
        (list "celli-stc-rr1-f#2.wav" 42 1)
        (list "celli-stc-rr1-f#3.wav" 54 1)
        (list "celli-stc-rr1-f#4.wav" 66 1)
        ;; (list "celli-stc-rr2-a2.wav")
        ;; (list "celli-stc-rr2-a3.wav")
        ;; (list "celli-stc-rr2-a4.wav")
        ;; (list "celli-stc-rr2-c2.wav")
        ;; (list "celli-stc-rr2-c3.wav")
        ;; (list "celli-stc-rr2-c4.wav")
        ;; (list "celli-stc-rr2-c5.wav")
        ;; (list "celli-stc-rr2-d#2.wav")
        ;; (list "celli-stc-rr2-d#3.wav")
        ;; (list "celli-stc-rr2-d#4.wav")
        ;; (list "celli-stc-rr2-f#2.wav")
        ;; (list "celli-stc-rr2-f#3.wav")
        ;; (list "celli-stc-rr2-f#4.wav")
        (list "celli-sus-a2.wav" 45 0)
        (list "celli-sus-a3.wav" 57 0)
        (list "celli-sus-a4.wav" 69 0)
        (list "celli-sus-c2.wav" 36 0)
        (list "celli-sus-c3.wav" 48 0)
        (list "celli-sus-c4.wav" 60 0)
        (list "celli-sus-c5.wav" 72 0)
        (list "celli-sus-d#2.wav" 39 0)
        (list "celli-sus-d#3.wav" 51 0)
        (list "celli-sus-d#4.wav" 63 0)
        (list "celli-sus-f#2.wav" 42 0)
        (list "celli-sus-f#3.wav" 54 0)
        (list "celli-sus-f#4.wav" 66 0)))

(define *SSO-chorus-sample-map*
  (list (string-append *SSO-sample-path* "Chorus")
        (list "chorus-female-a#4.wav" 70 0)
        (list "chorus-female-a#5.wav" 82 0)
        (list "chorus-female-a4.wav" 69 0)
        (list "chorus-female-a5.wav" 81 0)
        (list "chorus-female-b4.wav" 71 0)
        (list "chorus-female-b5.wav" 83 0)
        (list "chorus-female-c#5.wav" 73 0)
        (list "chorus-female-c5.wav" 72 0)
        (list "chorus-female-c6.wav" 84 0)
        (list "chorus-female-d#5.wav" 75 0)
        (list "chorus-female-d5.wav" 74 0)
        (list "chorus-female-e5.wav" 76 0)
        (list "chorus-female-f#5.wav" 78 0)
        (list "chorus-female-f5.wav" 77 0)
        (list "chorus-female-g#4.wav" 68 0)
        (list "chorus-female-g#5.wav" 80 0)
        (list "chorus-female-g4.wav" 67 0)
        (list "chorus-female-g5.wav" 79 0)
        (list "chorus-male-a#2.wav" 46 1 0)
        (list "chorus-male-a#3.wav" 58 1 0)
        (list "chorus-male-a2.wav" 45 1 0)
        (list "chorus-male-a3.wav" 57 1 0)
        (list "chorus-male-b2.wav" 47 1 0)
        (list "chorus-male-b3.wav" 59 1 0)
        (list "chorus-male-c#3.wav" 49 1)
        (list "chorus-male-c#4.wav" 61 1)
        (list "chorus-male-c3.wav" 48 1)
        (list "chorus-male-c4.wav" 60 1)
        (list "chorus-male-d#3.wav" 51 1)
        (list "chorus-male-d#4.wav" 63 1)
        (list "chorus-male-d3.wav" 50 1)
        (list "chorus-male-d4.wav" 62 1)
        (list "chorus-male-e3.wav" 52 1)
        (list "chorus-male-e4.wav" 64 1)
        (list "chorus-male-f#3.wav" 54 1)
        (list "chorus-male-f#4.wav" 66 1)
        (list "chorus-male-f3.wav" 53 1)
        (list "chorus-male-f4.wav" 65 1)
        (list "chorus-male-g#2.wav" 44 1)
        (list "chorus-male-g#3.wav" 56 1)
        (list "chorus-male-g2.wav" 43 1)
        (list "chorus-male-g3.wav" 55 1)))

(define *SSO-solo-horn-sample-map*
  (list (string-append *SSO-sample-path* "Horn")
        (list "horn-a#2.wav" 46)
        (list "horn-a#3.wav" 58)
        (list "horn-a#4.wav" 70)
        (list "horn-c#3.wav" 49)
        (list "horn-c#4.wav" 61)
        (list "horn-c#5.wav" 73)
        (list "horn-e2.wav" 40)
        (list "horn-e3.wav" 52)
        (list "horn-e4.wav" 64)
        (list "horn-e5.wav" 76)
        (list "horn-g2.wav" 43)
        (list "horn-g3.wav" 55)
        (list "horn-g4.wav" 67)))

(define *SSO-horns-sample-map*
  (list (string-append *SSO-sample-path* "Horns")
        (list "horns-stc-rr1-a#2.wav" 46 1)
        (list "horns-stc-rr1-a#3.wav" 58 1)
        (list "horns-stc-rr1-a#4.wav" 70 1)
        (list "horns-stc-rr1-c#3.wav" 49 1)
        (list "horns-stc-rr1-c#4.wav" 61 1)
        (list "horns-stc-rr1-e2.wav" 40 1)
        (list "horns-stc-rr1-e3.wav" 52 1)
        (list "horns-stc-rr1-e4.wav" 64 1)
        (list "horns-stc-rr1-g2.wav" 43 1)
        (list "horns-stc-rr1-g3.wav" 55 1)
        (list "horns-stc-rr1-g4.wav" 67 1)
        ;; (list "horns-stc-rr2-a#2.wav" 46)
        ;; (list "horns-stc-rr2-a#3.wav" 58)
        ;; (list "horns-stc-rr2-a#4.wav" 70)
        ;; (list "horns-stc-rr2-c#3.wav" 49)
        ;; (list "horns-stc-rr2-c#4.wav" 61)
        ;; (list "horns-stc-rr2-e2.wav" 40)
        ;; (list "horns-stc-rr2-e3.wav" 52)
        ;; (list "horns-stc-rr2-e4.wav" 64)
        ;; (list "horns-stc-rr2-g2.wav" 43)
        ;; (list "horns-stc-rr2-g3.wav" 55)
        ;; (list "horns-stc-rr2-g4.wav" 67)
        (list "horns-sus-a#2.wav" 46 0)
        (list "horns-sus-a#3.wav" 58 0)
        (list "horns-sus-a#4.wav" 70 0)
        (list "horns-sus-c#3.wav" 49 0)
        (list "horns-sus-c#4.wav" 61 0)
        (list "horns-sus-e2.wav" 40 0)
        (list "horns-sus-e3.wav" 52 0)
        (list "horns-sus-e4.wav" 64 0)
        (list "horns-sus-g2.wav" 43 0)
        (list "horns-sus-g3.wav" 55 0)
        (list "horns-sus-g4.wav" 67 0)))

(define *SSO-solo-trumpet-sample-map*
  (list (string-append *SSO-sample-path* "Trumpet")
        (list "trumpet-a#3.wav" 58 0)
        (list "trumpet-a#4.wav" 70 0)
        (list "trumpet-a#5.wav" 82 0)
        (list "trumpet-c#4.wav" 61 0)
        (list "trumpet-c#5.wav" 73 0)
        (list "trumpet-c#6.wav" 85 0)
        (list "trumpet-e3.wav" 52 0)
        (list "trumpet-e4.wav" 64 0)
        (list "trumpet-e5.wav" 76 0)
        (list "trumpet-e6.wav" 88 0)
        (list "trumpet-g3.wav" 55 0)
        (list "trumpet-g4.wav" 67 0)
        (list "trumpet-g5.wav" 79 0)))

(define *SSO-trumpets-sample-map*
  (list (string-append *SSO-sample-path* "Trumpets")
        (list "trumpets-stc-rr1-a#3.wav" 58 1)
        (list "trumpets-stc-rr1-a#4.wav" 70 1)
        (list "trumpets-stc-rr1-a#5.wav" 82 1)
        (list "trumpets-stc-rr1-c#4.wav" 61 1)
        (list "trumpets-stc-rr1-c#5.wav" 73 1)
        (list "trumpets-stc-rr1-c#6.wav" 85 1)
        (list "trumpets-stc-rr1-e3.wav" 52 1)
        (list "trumpets-stc-rr1-e4.wav" 64 1)
        (list "trumpets-stc-rr1-e5.wav" 76 1)
        (list "trumpets-stc-rr1-e6.wav" 88 1)
        (list "trumpets-stc-rr1-g3.wav" 55 1)
        (list "trumpets-stc-rr1-g4.wav" 67 1)
        (list "trumpets-stc-rr1-g5.wav" 79 1)
        ;; (list "trumpets-stc-rr2-a#3.wav" 58)
        ;; (list "trumpets-stc-rr2-a#4.wav" 70)
        ;; (list "trumpets-stc-rr2-a#5.wav" 82)
        ;; (list "trumpets-stc-rr2-c#4.wav" 61)
        ;; (list "trumpets-stc-rr2-c#5.wav" 73)
        ;; (list "trumpets-stc-rr2-c#6.wav" 85)
        ;; (list "trumpets-stc-rr2-e3.wav" 52)
        ;; (list "trumpets-stc-rr2-e4.wav" 64)
        ;; (list "trumpets-stc-rr2-e5.wav" 76)
        ;; (list "trumpets-stc-rr2-e6.wav" 88)
        ;; (list "trumpets-stc-rr2-g3.wav" 55)
        ;; (list "trumpets-stc-rr2-g4.wav" 67)
        ;; (list "trumpets-stc-rr2-g5.wav" 79)
        (list "trumpets-sus-a#3.wav" 58 0)
        (list "trumpets-sus-a#4.wav" 70 0)
        (list "trumpets-sus-a#5.wav" 82 0)
        (list "trumpets-sus-c#4.wav" 61 0)
        (list "trumpets-sus-c#5.wav" 73 0)
        (list "trumpets-sus-c#6.wav" 85 0)
        (list "trumpets-sus-e3.wav" 52 0)
        (list "trumpets-sus-e4.wav" 64 0)
        (list "trumpets-sus-e5.wav" 76 0)
        (list "trumpets-sus-e6.wav" 88 0)
        (list "trumpets-sus-g3.wav" 55 0)
        (list "trumpets-sus-g4.wav" 67 0)
        (list "trumpets-sus-g5.wav" 79 0)))

(define *SSO-bass-sample-map*
  (list (string-append *SSO-sample-path* "Basses")
        (list "basses-piz-rr1-a1.wav" 33 2)
        (list "basses-piz-rr1-a2.wav" 45 2)
        (list "basses-piz-rr1-a3.wav" 57 2)
        (list "basses-piz-rr1-c1.wav" 24 2)
        (list "basses-piz-rr1-c2.wav" 36 2)
        (list "basses-piz-rr1-c3.wav" 48 2)
        (list "basses-piz-rr1-c4.wav" 60 2)
        (list "basses-piz-rr1-d#1.wav" 27 2)
        (list "basses-piz-rr1-d#2.wav" 39 2)
        (list "basses-piz-rr1-d#3.wav" 51 2)
        (list "basses-piz-rr1-f#1.wav" 30 2)
        (list "basses-piz-rr1-f#2.wav" 42 2)
        (list "basses-piz-rr1-f#3.wav" 54 2)
        ;; (list "basses-piz-rr2-a1.wav" 33)
        ;; (list "basses-piz-rr2-a2.wav" 45)
        ;; (list "basses-piz-rr2-a3.wav" 57)
        ;; (list "basses-piz-rr2-c1.wav" 24)
        ;; (list "basses-piz-rr2-c2.wav" 36)
        ;; (list "basses-piz-rr2-c3.wav" 48)
        ;; (list "basses-piz-rr2-c4.wav" 60)
        ;; (list "basses-piz-rr2-d#1.wav" 27)
        ;; (list "basses-piz-rr2-d#2.wav" 39)
        ;; (list "basses-piz-rr2-d#3.wav" 51)
        ;; (list "basses-piz-rr2-f#1.wav" 30)
        ;; (list "basses-piz-rr2-f#2.wav" 42)
        ;; (list "basses-piz-rr2-f#3.wav" 54)
        (list "basses-stc-rr1-a1.wav" 33 1)
        (list "basses-stc-rr1-a2.wav" 45 1)
        (list "basses-stc-rr1-a3.wav" 57 1)
        (list "basses-stc-rr1-c1.wav" 24 1)
        (list "basses-stc-rr1-c2.wav" 36 1)
        (list "basses-stc-rr1-c3.wav" 48 1)
        (list "basses-stc-rr1-c4.wav" 60 1)
        (list "basses-stc-rr1-d#1.wav" 27 1)
        (list "basses-stc-rr1-d#2.wav" 39 1)
        (list "basses-stc-rr1-d#3.wav" 51 1)
        (list "basses-stc-rr1-f#1.wav" 30 1)
        (list "basses-stc-rr1-f#2.wav" 42 1)
        (list "basses-stc-rr1-f#3.wav" 54 1)
        ;; (list "basses-stc-rr2-a1.wav" 33)
        ;; (list "basses-stc-rr2-a2.wav" 45)
        ;; (list "basses-stc-rr2-a3.wav" 57)
        ;; (list "basses-stc-rr2-c1.wav" 24)
        ;; (list "basses-stc-rr2-c2.wav" 36)
        ;; (list "basses-stc-rr2-c3.wav" 48)
        ;; (list "basses-stc-rr2-c4.wav" 60)
        ;; (list "basses-stc-rr2-d#1.wav" 27)
        ;; (list "basses-stc-rr2-d#2.wav" 39)
        ;; (list "basses-stc-rr2-d#3.wav" 51)
        ;; (list "basses-stc-rr2-f#1.wav" 30)
        ;; (list "basses-stc-rr2-f#2.wav" 42)
        ;; (list "basses-stc-rr2-f#3.wav" 54)
        (list "basses-sus-a1.wav" 33 0)
        (list "basses-sus-a2.wav" 45 0)
        (list "basses-sus-a3.wav" 57 0)
        (list "basses-sus-c1.wav" 24 0)
        (list "basses-sus-c2.wav" 36 0)
        (list "basses-sus-c3.wav" 48 0)
        (list "basses-sus-c4.wav" 60 0)
        (list "basses-sus-d#1.wav" 27 0)
        (list "basses-sus-d#2.wav" 39 0)
        (list "basses-sus-d#3.wav" 51 0)
        (list "basses-sus-f#1.wav" 30 0)
        (list "basses-sus-f#2.wav" 42 0)
        (list "basses-sus-f#3.wav" 54 0)))

(define *SSO-solo-basoon-sample-map*
  (list (string-append *SSO-sample-path* "Basoon")
        (list "bassoon-a#1.wav" 34)
        (list "bassoon-a#2.wav" 46)
        (list "bassoon-a#3.wav" 58)
        (list "bassoon-a#4.wav" 70)
        (list "bassoon-c#2.wav" 37)
        (list "bassoon-c#3.wav" 49)
        (list "bassoon-c#4.wav" 61)
        (list "bassoon-c#5.wav" 73)
        (list "bassoon-e2.wav" 40)
        (list "bassoon-e3.wav" 52)
        (list "bassoon-e4.wav" 64)
        (list "bassoon-g2.wav" 43)
        (list "bassoon-g3.wav" 55)
        (list "bassoon-g4.wav" 67)))

(define *SSO-basoons-sample-map*
  (list (string-append *SSO-sample-path* "Basoons")
        (list "bassoons-sus-a#1.wav" 34)
        (list "bassoons-sus-a#2.wav" 46)
        (list "bassoons-sus-a#3.wav" 58)
        (list "bassoons-sus-a#4.wav" 70)
        (list "bassoons-sus-c#2.wav" 37)
        (list "bassoons-sus-c#3.wav" 49)
        (list "bassoons-sus-c#4.wav" 61)
        (list "bassoons-sus-c#5.wav" 73)
        (list "bassoons-sus-e2.wav" 40)
        (list "bassoons-sus-e3.wav" 52)
        (list "bassoons-sus-e4.wav" 64)
        (list "bassoons-sus-e5.wav" 76)
        (list "bassoons-sus-g2.wav" 43)
        (list "bassoons-sus-g3.wav" 55)
        (list "bassoons-sus-g4.wav" 67)))

(define *SSO-contrabasoon-sample-map*
  (list (string-append *SSO-sample-path* "Contrabassoon")
        (list "contrabassoon-a#0.wav" 22)
        (list "contrabassoon-a#1.wav" 34)
        (list "contrabassoon-a#2.wav" 46)
        (list "contrabassoon-a#3.wav" 58)
        (list "contrabassoon-c#1.wav" 25)
        (list "contrabassoon-c#2.wav" 37)
        (list "contrabassoon-c#3.wav" 49)
        (list "contrabassoon-e1.wav" 28)
        (list "contrabassoon-e2.wav" 40)
        (list "contrabassoon-e3.wav" 52)
        (list "contrabassoon-g1.wav" 31)
        (list "contrabassoon-g2.wav" 43)
        (list "contrabassoon-g3.wav" 55)))

(define *SSO-solo-clarinet-sample-map*
  (list (string-append *SSO-sample-path* "Clarinet")
        (list "clarinet-b3.wav" 59)
        (list "clarinet-b4.wav" 71)
        (list "clarinet-b5.wav" 83)
        (list "clarinet-d3.wav" 50)
        (list "clarinet-d4.wav" 62)
        (list "clarinet-d5.wav" 74)
        (list "clarinet-d6.wav" 86)
        (list "clarinet-f3.wav" 53)
        (list "clarinet-f4.wav" 65)
        (list "clarinet-f5.wav" 77)
        (list "clarinet-g#3.wav" 56)
        (list "clarinet-g#4.wav" 68)
        (list "clarinet-g#5.wav" 80)))

(define *SSO-bass-clarinet-sample-map*
  (list (string-append *SSO-sample-path* "Bass Clarinet")
        (list "bass_clarinet-b2.wav" 47)
        (list "bass_clarinet-b3.wav" 59)
        (list "bass_clarinet-b4.wav" 71)
        (list "bass_clarinet-d2.wav" 38)
        (list "bass_clarinet-d3.wav" 50)
        (list "bass_clarinet-d4.wav" 62)
        (list "bass_clarinet-d5.wav" 74)
        (list "bass_clarinet-f2.wav" 41)
        (list "bass_clarinet-f3.wav" 53)
        (list "bass_clarinet-f4.wav" 65)
        (list "bass_clarinet-g#2.wav" 44)
        (list "bass_clarinet-g#3.wav" 56)
        (list "bass_clarinet-g#4.wav" 68)))

(define *SSO-clarinets-sample-map*
  (list (string-append *SSO-sample-path* "Clarinets")
        (list "clarinets-sus-b3.wav" 59)
        (list "clarinets-sus-b4.wav" 71)
        (list "clarinets-sus-b5.wav" 83)
        (list "clarinets-sus-d3.wav" 50)
        (list "clarinets-sus-d4.wav" 62)
        (list "clarinets-sus-d5.wav" 74)
        (list "clarinets-sus-d6.wav" 86)
        (list "clarinets-sus-f3.wav" 53)
        (list "clarinets-sus-f4.wav" 65)
        (list "clarinets-sus-f5.wav" 77)
        (list "clarinets-sus-g#3.wav" 56)
        (list "clarinets-sus-g#4.wav" 68)
        (list "clarinets-sus-g#5.wav" 80)))

(define *SSO-cor-anglais-sample-map*
  (list (string-append *SSO-sample-path* "Cor Anglais")
        (list "cor_anglais-b3.wav" 59)
        (list "cor_anglais-b4.wav" 71)
        (list "cor_anglais-d4.wav" 62)
        (list "cor_anglais-d5.wav" 74)
        (list "cor_anglais-f3.wav" 53)
        (list "cor_anglais-f4.wav" 65)
        (list "cor_anglais-f5.wav" 77)
        (list "cor_anglais-g#3.wav" 56)
        (list "cor_anglais-g#4.wav" 68)))

(define *SSO-alto-flute-sample-map*
  (list (string-append *SSO-sample-path* "Flute")
        (list "alto_flute-a#3.wav" 58)
        (list "alto_flute-a#4.wav" 70)
        (list "alto_flute-a#5.wav" 82)
        (list "alto_flute-c#4.wav" 61)
        (list "alto_flute-c#5.wav" 73)
        (list "alto_flute-c#6.wav" 85)
        (list "alto_flute-e4.wav" 64)
        (list "alto_flute-e5.wav" 76)
        (list "alto_flute-e6.wav" 88)
        (list "alto_flute-g3.wav" 55)
        (list "alto_flute-g4.wav" 67)
        (list "alto_flute-g5.wav" 79)
        (list "alto_flute-g6.wav" 91)))

(define *SSO-solo-flute-sample-map*
  (list (string-append *SSO-sample-path* "Flute")
        (list "flute-a3.wav" 57)
        (list "flute-a4.wav" 69)
        (list "flute-a5.wav" 81)
        (list "flute-c3.wav" 48)
        (list "flute-c4.wav" 60)
        (list "flute-c5.wav" 72)
        (list "flute-c6.wav" 84)
        (list "flute-d#3.wav" 51)
        (list "flute-d#4.wav" 63)
        (list "flute-d#5.wav" 75)
        (list "flute-f#3.wav" 54)
        (list "flute-f#4.wav" 66)
        (list "flute-f#5.wav" 78)))

(define *SSO-flutes-sample-map*
  (list (string-append *SSO-sample-path* "Flutes")
        (list "flutes-stc-rr1-a3.wav" 57 1)
        (list "flutes-stc-rr1-a4.wav" 69 1)
        (list "flutes-stc-rr1-a5.wav" 81 1)
        (list "flutes-stc-rr1-c3.wav" 48 1)
        (list "flutes-stc-rr1-c4.wav" 60 1)
        (list "flutes-stc-rr1-c5.wav" 72 1)
        (list "flutes-stc-rr1-d#3.wav" 51 1)
        (list "flutes-stc-rr1-d#4.wav" 63 1)
        (list "flutes-stc-rr1-d#5.wav" 75 1)
        (list "flutes-stc-rr1-f#3.wav" 54 1)
        (list "flutes-stc-rr1-f#4.wav" 66 1)
        (list "flutes-stc-rr1-f#5.wav" 78 1)
        ;; (list "flutes-stc-rr2-a3.wav" 57)
        ;; (list "flutes-stc-rr2-a4.wav" 69)
        ;; (list "flutes-stc-rr2-a5.wav" 81)
        ;; (list "flutes-stc-rr2-c3.wav" 48)
        ;; (list "flutes-stc-rr2-c4.wav" 60)
        ;; (list "flutes-stc-rr2-c5.wav" 72)
        ;; (list "flutes-stc-rr2-d#3.wav" 51)
        ;; (list "flutes-stc-rr2-d#4.wav" 63)
        ;; (list "flutes-stc-rr2-d#5.wav" 75)
        ;; (list "flutes-stc-rr2-f#3.wav" 54)
        ;; (list "flutes-stc-rr2-f#4.wav" 66)
        ;; (list "flutes-stc-rr2-f#5.wav" 78)
        (list "flutes-sus-a3.wav" 57 0)
        (list "flutes-sus-a4.wav" 69 0)
        (list "flutes-sus-a5.wav" 81 0)
        (list "flutes-sus-c3.wav" 48 0)
        (list "flutes-sus-c4.wav" 60 0)
        (list "flutes-sus-c5.wav" 72 0)
        (list "flutes-sus-d#3.wav" 51 0)
        (list "flutes-sus-d#4.wav" 63 0)
        (list "flutes-sus-d#5.wav" 75 0)
        (list "flutes-sus-f#3.wav" 54 0)
        (list "flutes-sus-f#4.wav" 66 0)
        (list "flutes-sus-f#5.wav" 78 0)))

(define *SSO-piano-sample-map*
  (list (string-append *SSO-sample-path* "Grand Piano")
        (list "piano-f-a1.wav" 33 1)
        (list "piano-f-a2.wav" 45 1)
        (list "piano-f-a3.wav" 57 1)
        (list "piano-f-a4.wav" 69 1)
        (list "piano-f-a5.wav" 81 1)
        (list "piano-f-a6.wav" 93 1)
        (list "piano-f-a7.wav" 105 1)
        (list "piano-f-c1.wav" 24 1)
        (list "piano-f-c2.wav" 36 1)
        (list "piano-f-c3.wav" 48 1)
        (list "piano-f-c4.wav" 60 1)
        (list "piano-f-c5.wav" 72 1)
        (list "piano-f-c6.wav" 84 1)
        (list "piano-f-c7.wav" 96 1)
        (list "piano-f-c8.wav" 108 1)
        (list "piano-f-d#1.wav" 27 1)
        (list "piano-f-d#2.wav" 39 1)
        (list "piano-f-d#3.wav" 51 1)
        (list "piano-f-d#4.wav" 63 1)
        (list "piano-f-d#5.wav" 75 1)
        (list "piano-f-d#6.wav" 87 1)
        (list "piano-f-d#7.wav" 99 1)
        (list "piano-f-f#1.wav" 30 1)
        (list "piano-f-f#2.wav" 42 1)
        (list "piano-f-f#3.wav" 54 1)
        (list "piano-f-f#4.wav" 66 1)
        (list "piano-f-f#5.wav" 78 1)
        (list "piano-f-f#6.wav" 90 1)
        (list "piano-f-f#7.wav" 102 1 0)
        (list "piano-p-a1.wav" 33 0)
        (list "piano-p-a2.wav" 45 0)
        (list "piano-p-a3.wav" 57 0)
        (list "piano-p-a4.wav" 69 0)
        (list "piano-p-a5.wav" 81 0)
        (list "piano-p-a6.wav" 93 0)
        (list "piano-p-a7.wav" 105 0)
        (list "piano-p-c1.wav" 24 0)
        (list "piano-p-c2.wav" 36 0)
        (list "piano-p-c3.wav" 48 0)
        (list "piano-p-c4.wav" 60 0)
        (list "piano-p-c5.wav" 72 0)
        (list "piano-p-c6.wav" 84 0)
        (list "piano-p-c7.wav" 96 0)
        (list "piano-p-c8.wav" 108 0)
        (list "piano-p-d#1.wav" 27 0)
        (list "piano-p-d#2.wav" 39 0)
        (list "piano-p-d#3.wav" 51 0)
        (list "piano-p-d#4.wav" 63 0)
        (list "piano-p-d#5.wav" 75 0)
        (list "piano-p-d#6.wav" 87 0)
        (list "piano-p-d#7.wav" 99 0)
        (list "piano-p-f#1.wav" 30 0)
        (list "piano-p-f#2.wav" 42 0)
        (list "piano-p-f#3.wav" 54 0)
        (list "piano-p-f#4.wav" 66 0)
        (list "piano-p-f#5.wav" 78 0)
        (list "piano-p-f#6.wav" 90 0)
        (list "piano-p-f#7.wav" 102 0)))

(define *SSO-harp-sample-map*
  (list (string-append *SSO-sample-path* "Harp")
        (list "harp-a2.wav" 45)
        (list "harp-a3.wav" 57)
        (list "harp-a4.wav" 69)
        (list "harp-a5.wav" 81)
        (list "harp-a6.wav" 93)
        (list "harp-c2.wav" 36)
        (list "harp-c3.wav" 48)
        (list "harp-c4.wav" 60)
        (list "harp-c5.wav" 72)
        (list "harp-c6.wav" 84)
        (list "harp-c7.wav" 96)
        (list "harp-d#2.wav" 39)
        (list "harp-d#3.wav" 51)
        (list "harp-d#4.wav" 63)
        (list "harp-d#5.wav" 75)
        (list "harp-d#6.wav" 87)
        (list "harp-f#2.wav" 42)
        (list "harp-f#3.wav" 54)
        (list "harp-f#4.wav" 66)
        (list "harp-f#5.wav" 78)
        (list "harp-f#6.wav" 90)))

(define *SSO-solo-oboe-sample-map*
  (list (string-append *SSO-sample-path* "Oboe")
        (list "oboe-a#3.wav" 58)
        (list "oboe-a#4.wav" 70)
        (list "oboe-a#5.wav" 82)
        (list "oboe-c#4.wav" 61)
        (list "oboe-c#5.wav" 73)
        (list "oboe-c6.wav" 84)
        (list "oboe-e4.wav" 64)
        (list "oboe-e5.wav" 76)
        (list "oboe-g4.wav" 67)
        (list "oboe-g5.wav" 79)))

(define *SSO-oboes-sample-map*
  (list (string-append *SSO-sample-path* "Oboes")
        (list "oboes-sus-a#3.wav" 58)
        (list "oboes-sus-a#4.wav" 70)
        (list "oboes-sus-a#5.wav" 82)
        (list "oboes-sus-c#4.wav" 61)
        (list "oboes-sus-c#5.wav" 73)
        (list "oboes-sus-c#6.wav" 85)
        (list "oboes-sus-e4.wav" 64)
        (list "oboes-sus-e5.wav" 76)
        (list "oboes-sus-e6.wav" 88)
        (list "oboes-sus-g4.wav" 67)
        (list "oboes-sus-g5.wav" 79)))

;; not general-midi numbered yet
(define *SSO-percussion-sample-map*
  (list (string-append *SSO-sample-path* "Percussion")
        (list "bar_chimes-a.wav")
        (list "bar_chimes-b.wav")
        (list "bar_chimes-c.wav")
        (list "bass_drum-f.wav" *gm-kick*)
        (list "bass_drum-p.wav" *gm-kick-2*)
        (list "bell_tree.wav")
        (list "cabasa-a.wav")
        (list "cabasa-b.wav")
        (list "castanets-rr1.wav")
        (list "castanets-rr2.wav")
        (list "chimes-a3.wav")
        (list "chimes-a4.wav")
        (list "chimes-a5.wav")
        (list "chimes-c3.wav")
        (list "chimes-c4.wav")
        (list "chimes-c5.wav")
        (list "chimes-c6.wav")
        (list "chimes-d#3.wav")
        (list "chimes-d#4.wav")
        (list "chimes-d#5.wav")
        (list "chimes-f#3.wav")
        (list "chimes-f#4.wav")
        (list "chimes-f#5.wav")
        (list "conga-mut-rr1.wav")
        (list "conga-mut-rr2.wav")
        (list "conga-opn-rr1.wav")
        (list "conga-opn-rr2.wav")
        (list "conga-slp-rr1.wav")
        (list "conga-slp-rr2.wav")
        (list "cymbal_roll-a-f.wav")
        (list "cymbal_roll-a-mf.wav")
        (list "cymbal_roll-a-p.wav")
        (list "cymbal_roll-b.wav")
        (list "finger_cymbal-hi.wav")
        (list "finger_cymbal-lo.wav")
        (list "glockenspiel-a3.wav")
        (list "glockenspiel-a4.wav")
        (list "glockenspiel-a5.wav")
        (list "glockenspiel-c3.wav")
        (list "glockenspiel-c4.wav")
        (list "glockenspiel-c5.wav")
        (list "glockenspiel-c6.wav")
        (list "glockenspiel-d#3.wav")
        (list "glockenspiel-d#4.wav")
        (list "glockenspiel-d#5.wav")
        (list "glockenspiel-f#3.wav")
        (list "glockenspiel-f#4.wav")
        (list "glockenspiel-f#5.wav")
        (list "piatti.wav")
        (list "ratchet.wav")
        (list "shaker-a.wav")
        (list "shaker-b.wav")
        (list "shaker-c.wav")
        (list "shaker-hi-a.wav")
        (list "shaker-hi-b.wav")
        (list "shaker-lo-a.wav")
        (list "shaker-lo-b.wav")
        (list "sleigh_bells-f.wav")
        (list "sleigh_bells-mf.wav")
        (list "snare-lh-ff.wav")
        (list "snare-lh-mf.wav")
        (list "snare-lh-p.wav")
        (list "snare-rh-ff.wav")
        (list "snare-rh-mf.wav")
        (list "snare-rh-p.wav")
        (list "snare-roll.wav")
        (list "tambourine-hit-f.wav")
        (list "tambourine-hit-mf.wav")
        (list "tambourine-roll.wav")
        (list "tambourine-shake.wav")
        (list "tamtam-a.wav")
        (list "tamtam-b.wav")
        (list "tamtam-c.wav")
        (list "timpani-f-lh-a1.wav")
        (list "timpani-f-lh-c1.wav")
        (list "timpani-f-lh-c2.wav")
        (list "timpani-f-lh-d#1.wav")
        (list "timpani-f-lh-f#1.wav")
        (list "timpani-f-rh-a1.wav")
        (list "timpani-f-rh-c1.wav")
        (list "timpani-f-rh-c2.wav")
        (list "timpani-f-rh-d#1.wav")
        (list "timpani-f-rh-f#1.wav")
        (list "timpani-p-lh-a1.wav")
        (list "timpani-p-lh-c1.wav")
        (list "timpani-p-lh-c2.wav")
        (list "timpani-p-lh-d#1.wav")
        (list "timpani-p-lh-f#1.wav")
        (list "timpani-p-rh-a1.wav")
        (list "timpani-p-rh-c1.wav")
        (list "timpani-p-rh-c2.wav")
        (list "timpani-p-rh-d#1.wav")
        (list "timpani-p-rh-f#1.wav")
        (list "timpani-roll-a1.wav")
        (list "timpani-roll-c1.wav")
        (list "timpani-roll-c2.wav")
        (list "timpani-roll-crsc-a1.wav")
        (list "timpani-roll-crsc-c1.wav")
        (list "timpani-roll-crsc-c2.wav")
        (list "timpani-roll-crsc-d#1.wav")
        (list "timpani-roll-crsc-f#1.wav")
        (list "timpani-roll-d#1.wav")
        (list "timpani-roll-f#1.wav")
        (list "triangle-hlf-opn-rr1.wav")
        (list "triangle-hlf-opn-rr2.wav")
        (list "triangle-hlf-opn-rr3.wav")
        (list "triangle-mtd-rr1.wav")
        (list "triangle-mtd-rr2.wav")
        (list "triangle-mtd-rr3.wav")
        (list "triangle-opn-rr1.wav")
        (list "triangle-opn-rr2.wav")
        (list "triangle-opn-rr3.wav")
        (list "triangle-roll.wav")
        (list "vibraslap.wav")
        (list "wood_block-hi.wav")
        (list "wood_block-lo.wav")
        (list "xylophone-a#2.wav")
        (list "xylophone-a#3.wav")
        (list "xylophone-a#4.wav")
        (list "xylophone-a#5.wav")
        (list "xylophone-c#3.wav")
        (list "xylophone-c#4.wav")
        (list "xylophone-c#5.wav")
        (list "xylophone-e3.wav")
        (list "xylophone-e4.wav")
        (list "xylophone-e5.wav")
        (list "xylophone-g2.wav")
        (list "xylophone-g3.wav")
        (list "xylophone-g4.wav")
        (list "xylophone-g5.wav")))

(define *SSO-piccolo-sample-map*
  (list (string-append *SSO-sample-path* "Piccolo")
        (list "piccolo-a4.wav" 69)
        (list "piccolo-a5.wav" 81)
        (list "piccolo-c4.wav" 60)
        (list "piccolo-c5.wav" 72)
        (list "piccolo-c6.wav" 84)
        (list "piccolo-d#4.wav" 63)
        (list "piccolo-d#5.wav" 75)
        (list "piccolo-d#6.wav" 87)
        (list "piccolo-f#4.wav" 66)
        (list "piccolo-f#5.wav" 78)
        (list "piccolo-f#6.wav" 90)))

(define *SSO-tenor-trombone-sample-map*
  (list (string-append *SSO-sample-path* "Tenor Trombone")
        (list "tenor_trombone-a#2.wav" 46)
        (list "tenor_trombone-a#3.wav" 58)
        (list "tenor_trombone-a#4.wav" 70)
        (list "tenor_trombone-c#3.wav" 49)
        (list "tenor_trombone-c#4.wav" 61)
        (list "tenor_trombone-e2.wav" 40)
        (list "tenor_trombone-e3.wav" 52)
        (list "tenor_trombone-e4.wav" 64)
        (list "tenor_trombone-g2.wav" 43)
        (list "tenor_trombone-g3.wav" 55)
        (list "tenor_trombone-g4.wav" 67)))

(define *SSO-bass-trombone-sample-map*
  (list (string-append *SSO-sample-path* "Bass Trombone")
        (list "bass_trombone-a#1.wav" 34)
        (list "bass_trombone-a#2.wav" 46)
        (list "bass_trombone-a#3.wav" 58)
        (list "bass_trombone-c#2.wav" 37)
        (list "bass_trombone-c#3.wav" 49)
        (list "bass_trombone-c#4.wav" 61)
        (list "bass_trombone-e1.wav" 28)
        (list "bass_trombone-e2.wav" 40)
        (list "bass_trombone-e3.wav" 52)
        (list "bass_trombone-e4.wav" 64)
        (list "bass_trombone-g1.wav" 31)
        (list "bass_trombone-g2.wav" 43)
        (list "bass_trombone-g3.wav" 55)
        (list "bass_trombone-g4.wav" 67)))

(define *SSO-trombones-sample-map*
  (list (string-append *SSO-sample-path* "Trombones")
        (list "trombones-stc-rr1-a#2.wav" 46 1)
        (list "trombones-stc-rr1-a#3.wav" 58 1)
        (list "trombones-stc-rr1-a#4.wav" 70 1)
        (list "trombones-stc-rr1-c#3.wav" 49 1)
        (list "trombones-stc-rr1-c#4.wav" 61 1)
        (list "trombones-stc-rr1-c#5.wav" 73 1)
        (list "trombones-stc-rr1-e2.wav" 40 1)
        (list "trombones-stc-rr1-e3.wav" 52 1)
        (list "trombones-stc-rr1-e4.wav" 64 1)
        (list "trombones-stc-rr1-e5.wav" 76 1)
        (list "trombones-stc-rr1-g2.wav" 43 1)
        (list "trombones-stc-rr1-g3.wav" 55 1)
        (list "trombones-stc-rr1-g4.wav" 67 1)
        ;; (list "trombones-stc-rr2-a#2.wav" 46)
        ;; (list "trombones-stc-rr2-a#3.wav" 58)
        ;; (list "trombones-stc-rr2-a#4.wav" 70)
        ;; (list "trombones-stc-rr2-c#3.wav" 49)
        ;; (list "trombones-stc-rr2-c#4.wav" 61)
        ;; (list "trombones-stc-rr2-c#5.wav" 73)
        ;; (list "trombones-stc-rr2-e2.wav" 40)
        ;; (list "trombones-stc-rr2-e3.wav" 52)
        ;; (list "trombones-stc-rr2-e4.wav" 64)
        ;; (list "trombones-stc-rr2-e5.wav" 76)
        ;; (list "trombones-stc-rr2-g2.wav" 43)
        ;; (list "trombones-stc-rr2-g3.wav" 55)
        ;; (list "trombones-stc-rr2-g4.wav" 67)
        (list "trombones-sus-a#2.wav" 46 0)
        (list "trombones-sus-a#3.wav" 58 0)
        (list "trombones-sus-a#4.wav" 70 0)
        (list "trombones-sus-c#3.wav" 49 0)
        (list "trombones-sus-c#4.wav" 61 0)
        (list "trombones-sus-c#5.wav" 73 0)
        (list "trombones-sus-e2.wav" 40 0)
        (list "trombones-sus-e3.wav" 52 0)
        (list "trombones-sus-e4.wav" 64 0)
        (list "trombones-sus-e5.wav" 76 0)
        (list "trombones-sus-g2.wav" 43 0)
        (list "trombones-sus-g3.wav" 55 0)
        (list "trombones-sus-g4.wav" 67 0)))

(define *SSO-violas-sample-map*
  (list (string-append *SSO-sample-path* "Violas")
        (list "violas-piz-rr1-a3.wav" 57 1)
        (list "violas-piz-rr1-a4.wav" 69 1)
        (list "violas-piz-rr1-a5.wav" 81 1)
        (list "violas-piz-rr1-c3.wav" 48 1)
        (list "violas-piz-rr1-c4.wav" 60 1)
        (list "violas-piz-rr1-c5.wav" 72 1)
        (list "violas-piz-rr1-c6.wav" 84 1)
        (list "violas-piz-rr1-d#3.wav" 51 1)
        (list "violas-piz-rr1-d#4.wav" 63 1)
        (list "violas-piz-rr1-d#5.wav" 75 1)
        (list "violas-piz-rr1-f#3.wav" 54 1)
        (list "violas-piz-rr1-f#4.wav" 66 1)
        (list "violas-piz-rr1-f#5.wav" 78 1)
        ;; (list "violas-piz-rr2-a3.wav" 57)
        ;; (list "violas-piz-rr2-a4.wav" 69)
        ;; (list "violas-piz-rr2-a5.wav" 81)
        ;; (list "violas-piz-rr2-c3.wav" 48)
        ;; (list "violas-piz-rr2-c4.wav" 60)
        ;; (list "violas-piz-rr2-c5.wav" 72)
        ;; (list "violas-piz-rr2-c6.wav" 84)
        ;; (list "violas-piz-rr2-d#3.wav" 51)
        ;; (list "violas-piz-rr2-d#4.wav" 63)
        ;; (list "violas-piz-rr2-d#5.wav" 75)
        ;; (list "violas-piz-rr2-f#3.wav" 54)
        ;; (list "violas-piz-rr2-f#4.wav" 66)
        ;; (list "violas-piz-rr2-f#5.wav" 78)
        (list "violas-sus-a3.wav" 57 0)
        (list "violas-sus-a4.wav" 69 0)
        (list "violas-sus-a5.wav" 81 0)
        (list "violas-sus-c3.wav" 48 0)
        (list "violas-sus-c4.wav" 60 0)
        (list "violas-sus-c5.wav" 72 0)
        (list "violas-sus-c6.wav" 84 0)
        (list "violas-sus-d#3.wav" 51 0)
        (list "violas-sus-d#4.wav" 63 0)
        (list "violas-sus-d#5.wav" 75 0)
        (list "violas-sus-f#3.wav" 54 0)
        (list "violas-sus-f#4.wav" 66 0)
        (list "violas-sus-f#5.wav" 78 0)))

(define *SSO-tuba-sample-map*
  (list (string-append *SSO-sample-path* "Tuba")
        (list "tuba-stc-rr1-a#1.wav" 34 1)
        (list "tuba-stc-rr1-a#2.wav" 46 1)
        (list "tuba-stc-rr1-a#3.wav" 58 1)
        (list "tuba-stc-rr1-c#2.wav" 37 1)
        (list "tuba-stc-rr1-c#3.wav" 49 1)
        (list "tuba-stc-rr1-c#4.wav" 61 1)
        (list "tuba-stc-rr1-e1.wav" 28 1)
        (list "tuba-stc-rr1-e2.wav" 40 1)
        (list "tuba-stc-rr1-e3.wav" 52 1)
        (list "tuba-stc-rr1-g1.wav" 31 1)
        (list "tuba-stc-rr1-g2.wav" 43 1)
        (list "tuba-stc-rr1-g3.wav" 55 1)
        ;; (list "tuba-stc-rr2-a#1.wav" 34)
        ;; (list "tuba-stc-rr2-a#2.wav" 46)
        ;; (list "tuba-stc-rr2-a#3.wav" 58)
        ;; (list "tuba-stc-rr2-c#2.wav" 37)
        ;; (list "tuba-stc-rr2-c#3.wav" 49)
        ;; (list "tuba-stc-rr2-c#4.wav" 61)
        ;; (list "tuba-stc-rr2-e1.wav" 28)
        ;; (list "tuba-stc-rr2-e2.wav" 40)
        ;; (list "tuba-stc-rr2-e3.wav" 52)
        ;; (list "tuba-stc-rr2-g1.wav" 31)
        ;; (list "tuba-stc-rr2-g2.wav" 43)
        ;; (list "tuba-stc-rr2-g3.wav" 55)
        (list "tuba-sus-a#1.wav" 34 0)
        (list "tuba-sus-a#2.wav" 46 0)
        (list "tuba-sus-a#3.wav" 58 0)
        (list "tuba-sus-c#2.wav" 37 0)
        (list "tuba-sus-c#3.wav" 49 0)
        (list "tuba-sus-c#4.wav" 61 0)
        (list "tuba-sus-e1.wav" 28 0)
        (list "tuba-sus-e2.wav" 40 0)
        (list "tuba-sus-e3.wav" 52 0)
        (list "tuba-sus-g1.wav" 31 0)
        (list "tuba-sus-g2.wav" 43 0)
        (list "tuba-sus-g3.wav" 55 0)))

(define *808-kit-map*
  (list (string-append *user-sample-dir* "/drums/808")
        (list "36.aif" 36)
        (list "37.aif" 37)
        (list "38.aif" 38)
        (list "39.aif" 39)
        (list "40.aif" 40)
        (list "41.aif" 41)
        (list "42.aif" 42)
        (list "43.aif" 43)
        (list "44.aif" 44)
        (list "45.aif" 45)
        (list "46.aif" 46)
        (list "47.aif" 47)
        (list "48.aif" 48)
        (list "49.aif" 49)
        (list "50.aif" 50)
        (list "51.aif" 51)
        (list "52.aif" 52)
        (list "53.aif" 53)
        (list "54.aif" 54)
        (list "55.aif" 55)
        (list "56.aif" 56)
        (list "57.aif" 57)
        (list "58.aif" 58)
        (list "59.aif" 59)
        (list "60.aif" 60)
        (list "61.aif" 61)
        (list "62.aif" 62)
        (list "63.aif" 63)
        (list "64.aif" 64)
        (list "65.aif" 65)
        (list "66.aif" 66)))

(define *speak-n-say-map*
  (list (string-append *user-sample-dir* "/drums/SPEAK N SPELL/Letters Kit")
	(list "SnS_A.wav" 65)
	(list "SnS_B.wav" 66)
	(list "SnS_Blood.wav" 59)
	(list "SnS_Broken.wav" 60)
	(list "SnS_C.wav" 67)
	(list "SnS_D.wav" 68)
	(list "SnS_E.wav" 69)
	(list "SnS_Electric.wav" 61)
	(list "SnS_F.wav" 70)
	(list "SnS_G.wav" 71)
	(list "SnS_H.wav" 72)
	(list "SnS_Heavy.wav" 62)
	(list "SnS_I.wav" 73)
	(list "SnS_J.wav" 74)
	(list "SnS_K.wav" 75)
	(list "SnS_L.wav" 76)
	(list "SnS_M.wav" 77)
	(list "SnS_N.wav" 78)
	(list "SnS_O.wav" 79)
	(list "SnS_ON1.wav" 57)
	(list "SnS_ON2.wav" 58)
	(list "SnS_P.wav" 80)
	(list "SnS_Q.wav" 81)
	(list "SnS_R.wav" 82)
	(list "SnS_Rockit.wav" 63)
	(list "SnS_S.wav" 83)
	(list "SnS_Spell.wav" 64)
	(list "SnS_T.wav" 84)
	(list "SnS_U.wav" 85)
	(list "SnS_V.wav" 86)
	(list "SnS_W.wav" 87)
	(list "SnS_X.wav" 88)
	(list "SnS_Y.wav" 89)
	(list "SnS_Z.wav" 90)))

;; helper functions

(define sm-assign-indices
  (lambda (partial-map)
    (let loop ((unassigned
                (cl:sort partial-map
                         (lambda (a b)
                           (let ((l1 (length a))
                                 (l2 (length b)))
                             (cond ((and (= l1 2) (= l2 2))
                                    (< (cadr a) (cadr b)))
                                   ((= l1 2) #t)
                                   ((= l2 2) #f)
                                   (else #t))))))
               (current-slot 35)
               (filled-slots '())
               (result '()))
      (if (null? unassigned)
          (reverse result)
          (if (= (length (car unassigned)) 2)
              (loop (cdr unassigned)
                    current-slot
                    (cons (cadar unassigned) filled-slots)
                    (cons (append (car unassigned) '(0 0)) result))
              (if (member current-slot filled-slots)
                  (loop unassigned
                        (+ current-slot 1)
                        filled-slots
                        result)
                  (loop (cdr unassigned)
                        (+ current-slot 1)
                        (cons current-slot filled-slots)
                        (cons (list (caar unassigned) current-slot 0 0) result))))))))

(define sm-sample-get-index
  (lambda (sample)
    (if (< (length sample) 2)
        #f
        (cadr sample))))

(define sm-sample-get-bank
  (lambda (sample)
    (if (< (length sample) 3)
        #f
        (caddr sample))))

;; set-sampler-index args: inst fname index offset lgth bank print?
(define sm-sample-fill-with-defaults
  (lambda (sample next-index)
    (if (< (length sample) 2)
        (append sample (list next-index 0 0 0))
        (if (< (length sample) 3)
            (append sample '(0 0 0))
            (append (cl:butlast sample 1) (list 0 0 (car (cl:last sample 1))))))))

(define sm-fill-partial-map
  (lambda (sample-map)
    (let* ((indexed-samples (cl:remove-if-not sm-sample-get-index sample-map))
           (used-indices (map sm-sample-get-index indexed-samples))
           (unindexed-samples (cl:remove-if sm-sample-get-index sample-map))
           (unused-indices
            (cl:set-difference
             (make-list-with-proc (+ (length sample-map)
                                     (length used-indices))
                                  (lambda (i) (+ i 35)))
             used-indices)))
      (map sm-sample-fill-with-defaults
           (append indexed-samples unindexed-samples)
           (append used-indices unused-indices)))))

(define-macro (sm-load-map sampler sample-map . bank)
  (if (null? *user-sample-dir*)
      (print-error 'error: 'you 'need 'to 'define '*user-sample-dir*)
      `(let* ((sample-dir (car ,sample-map))
              (sample-bank ,(if (null? bank) 0 (car bank)))
              (processed-samples (sm-fill-partial-map (cdr ,sample-map)))
              (num-banks 20)
              (count-vec (make-vector num-banks 0)))
         (for-each (lambda (sample)
                     (if sample
                         ;; inst fname index offset lgth bank print?
                         (let ((bank (+ sample-bank (list-ref sample 4))))
                           (set-sampler-index ,sampler
                                              (string-append sample-dir "/" (car sample))
                                              (cadr sample)
                                              (caddr sample)
                                              (cadddr sample)
                                              bank
                                              0)
                           (vector-set! count-vec
                                        bank
                                        (+ (vector-ref count-vec bank) 1)))))
                   processed-samples)
         (ascii-print-color 0 6 10)
         (make-list-with-proc num-banks
                              (lambda (bank-index)
                                (let ((samples-loaded (vector-ref count-vec bank-index)))
                                  (if (> samples-loaded 0)
                                      (begin (print "Loaded"
                                                    samples-loaded
                                                    "files into bank"
                                                    bank-index)
                                             (println))))))
         (ascii-print-color 0 7 10)
         (println))))
